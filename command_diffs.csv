project,pairing_mode,file_old,file_new,scope,change_type,line_old,pos_old,line_new,pos_new,kind_old,kind_new,text_old,text_new
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,added,,,32,1,,ClassDef,,"class PlainMarkerProfile(ProfileBase): """"""Plain Marker format profile (v1.x compatibility)."""""" HEADER_PATTERN = re.compile('^\\s*#\\s*={50,}\\s*$') FILE_PATTERN = re.compile('^\\s*#\\s*FILE\\s*:\\s*(.+?)\\s*$', re.IGNORECASE) META_PATTERN = re.compile('^\\s*#\\s*META\\s*:\\s*(.+?)\\s*$', re.IGNORECASE) META_FIELD_PATTERN = re.compile('(\\w+)\\s*=\\s*([^;]+)') @property def profile_name(self) -> str: return 'plain_marker' def get_display_name(self) -> str: return 'Plain Marker (Legacy)' def get_capabilities(self) -> Dict[str, bool]: return {'supports_binary': True, 'supports_checksums': False, 'supports_metadata': True} def detect_format(self, text: str) -> bool: """"""Detect if text appears to use '# FILE:' markers."""""" for line in text.splitlines()[:20]: if self.FILE_PATTERN.match(line): return True return False def parse_stream(self, text: str) -> BundleManifest: """""" Parse plain-marker bundle text into a BundleManifest. Rules: - '# FILE: <path>' begins a new file block. - '# META: key=value; ...' is optional; later keys override earlier. - Separator lines (====) are ignored. - Empty or dot-only paths after '# FILE:' are ignored. - Duplicate paths are consolidated with last-one-wins. """""" entries: List[BundleEntry] = [] current_block: Optional[Dict[str, str]] = None current_meta: Dict[str, str] = {} for line_no, line in enumerate(text.splitlines(keepends=True), start=1): m_file = self.FILE_PATTERN.match(line) if m_file: if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) raw_path = (m_file.group(1) or '').strip() if not raw_path or raw_path in {'.', './', '.\\', '/'}: current_block = None current_meta = {} continue current_block = {'path': raw_path, 'content': '', 'line_start': line_no} current_meta = {} continue m_meta = self.META_PATTERN.match(line) if m_meta and current_block is not None: current_meta.update(self._parse_meta(m_meta.group(1))) continue if self.HEADER_PATTERN.match(line): continue if current_block is not None: current_block['content'] += line if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) if not entries: raise ProfileParseError(self.profile_name, 'No files found in bundle', 0) seen = set() consolidated: List[BundleEntry] = [] for e in reversed(entries): if e.path not in seen: seen.add(e.path) consolidated.append(e) entries = list(reversed(consolidated)) return BundleManifest(entries=entries, profile=self.profile_name, metadata={'format_version': '1.x', 'parser': 'PlainMarkerProfile'}) def format_manifest(self, manifest: BundleManifest) -> str: """""" Convert a BundleManifest to plain-marker text. Always writes 'bundle_format_diagnostic.log' with detailed entry info. """""" self._validate_before_format(manifest) import logging logger = logging.getLogger('bundle.format_diagnostic') logger.setLevel(logging.DEBUG) if not logger.handlers: fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8') fh.setLevel(logging.DEBUG) fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s') fh.setFormatter(fmt) logger.addHandler(fh) logger.propagate = False logger.info('=' * 80) logger.info('STARTING format_manifest()') logger.info(f'Manifest contains {len(manifest.entries)} entries') logger.info('=' * 80) border = '# ' + '=' * 67 out: List[str] = [] for idx, entry in enumerate(manifest.entries): logger.info(f'\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---') logger.info(f' Path: {entry.path}') logger.info(f' Binary: {entry.is_binary}') logger.info(f' Encoding: {entry.encoding}') logger.info(f' EOL: {entry.eol_style}') logger.info(f' Content length: {len(entry.content)} chars') logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}') logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}') tail = entry.content[-50:] if entry.content else '' logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}') mode = 'binary' if entry.is_binary else 'text' encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8') eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF') header = f'{border}\n# FILE: {entry.path}\n# META: encoding={encoding}; eol={eol}; mode={mode}\n{border}\n' if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\n'): block += '\n' if idx < len(manifest.entries) - 1: block += '' out.append(block) logger.info('COMPLETED format_manifest()') return ''.join(out) def _parse_meta(self, meta_str: str) -> Dict[str, str]: meta: Dict[str, str] = {} for k, v in self.META_FIELD_PATTERN.findall(meta_str): meta[k.strip().lower()] = v.strip() return meta def _trim_header_spacing(self, content: str, meta: Dict[str, str]) -> str: """""" Trim a redundant separator newline while honoring an explicit trailing flag. META example: trailing=false|true """""" trailing = (meta.get('trailing') or '').strip().lower() if content.endswith('\n\n'): return content[:-2] if trailing == 'false' else content[:-1] if trailing == 'false' and content.endswith('\n'): return content[:-1] return content def _finalize(self, raw: Dict[str, str], meta: Dict[str, str]) -> BundleEntry: path = raw['path'].replace('\\', '/') mode = (meta.get('mode') or '').lower() encoding = (meta.get('encoding') or ('base64' if mode == 'binary' else 'utf-8')).lower() is_binary = mode == 'binary' or encoding == 'base64' eol = meta.get('eol') or ('n/a' if is_binary else 'LF') return BundleEntry(path=path, content=raw.get('content', ''), is_binary=is_binary, encoding=encoding, eol_style=eol, checksum=None) def _validate_before_format(self, manifest: BundleManifest) -> None: """"""Ensure entries are well-formed before formatting."""""" for e in manifest.entries: if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes') if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8' if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF'"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,added,,,33,1,,Expr,,'Plain Marker format profile (v1.x compatibility).'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,added,,,36,1,,Assign,,"HEADER_PATTERN = re.compile('^\\s*#\\s*={50,}\\s*$')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,added,,,37,1,,Assign,,"FILE_PATTERN = re.compile('^\\s*#\\s*FILE\\s*:\\s*(.+?)\\s*$', re.IGNORECASE)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,added,,,38,1,,Assign,,"META_PATTERN = re.compile('^\\s*#\\s*META\\s*:\\s*(.+?)\\s*$', re.IGNORECASE)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,added,,,39,1,,Assign,,META_FIELD_PATTERN = re.compile('(\\w+)\\s*=\\s*([^;]+)')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,added,,,241,1,,FunctionDef,,"def _finalize(self, raw: Dict[str, str], meta: Dict[str, str]) -> BundleEntry: path = raw['path'].replace('\\', '/') mode = (meta.get('mode') or '').lower() encoding = (meta.get('encoding') or ('base64' if mode == 'binary' else 'utf-8')).lower() is_binary = mode == 'binary' or encoding == 'base64' eol = meta.get('eol') or ('n/a' if is_binary else 'LF') return BundleEntry(path=path, content=raw.get('content', ''), is_binary=is_binary, encoding=encoding, eol_style=eol, checksum=None)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,added,,,242,1,,Assign,,"path = raw['path'].replace('\\', '/')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,added,,,243,1,,Assign,,mode = (meta.get('mode') or '').lower()
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,added,,,244,1,,Assign,,encoding = (meta.get('encoding') or ('base64' if mode == 'binary' else 'utf-8')).lower()
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,added,,,245,1,,Assign,,is_binary = mode == 'binary' or encoding == 'base64'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,added,,,246,1,,Assign,,eol = meta.get('eol') or ('n/a' if is_binary else 'LF')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,added,,,248,1,,Return,,"return BundleEntry(path=path, content=raw.get('content', ''), is_binary=is_binary, encoding=encoding, eol_style=eol, checksum=None)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._parse_meta,added,,,223,1,,FunctionDef,,"def _parse_meta(self, meta_str: str) -> Dict[str, str]: meta: Dict[str, str] = {} for k, v in self.META_FIELD_PATTERN.findall(meta_str): meta[k.strip().lower()] = v.strip() return meta"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._parse_meta,added,,,224,1,,AnnAssign,,"meta: Dict[str, str] = {}"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._parse_meta,added,,,225,1,,For,,"for k, v in self.META_FIELD_PATTERN.findall(meta_str): meta[k.strip().lower()] = v.strip()"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._parse_meta,added,,,226,1,,Assign,,meta[k.strip().lower()] = v.strip()
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._parse_meta,added,,,227,1,,Return,,return meta
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,added,,,229,1,,FunctionDef,,"def _trim_header_spacing(self, content: str, meta: Dict[str, str]) -> str: """""" Trim a redundant separator newline while honoring an explicit trailing flag. META example: trailing=false|true """""" trailing = (meta.get('trailing') or '').strip().lower() if content.endswith('\n\n'): return content[:-2] if trailing == 'false' else content[:-1] if trailing == 'false' and content.endswith('\n'): return content[:-1] return content"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,added,,,230,1,,Expr,,'\n Trim a redundant separator newline while honoring an explicit trailing flag.\n META example: trailing=false|true\n '
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,added,,,234,1,,Assign,,trailing = (meta.get('trailing') or '').strip().lower()
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,added,,,235,1,,If,,if content.endswith('\n\n'): return content[:-2] if trailing == 'false' else content[:-1]
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,added,,,236,1,,Return,,return content[:-2] if trailing == 'false' else content[:-1]
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,added,,,237,1,,If,,if trailing == 'false' and content.endswith('\n'): return content[:-1]
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,added,,,238,1,,Return,,return content[:-1]
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,added,,,239,1,,Return,,return content
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,added,,,257,1,,FunctionDef,,"def _validate_before_format(self, manifest: BundleManifest) -> None: """"""Ensure entries are well-formed before formatting."""""" for e in manifest.entries: if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes') if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8' if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF'"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,added,,,258,1,,Expr,,'Ensure entries are well-formed before formatting.'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,added,,,259,1,,For,,"for e in manifest.entries: if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes') if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8' if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF'"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,added,,,260,1,,If,,"if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,added,,,261,1,,Raise,,"raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,added,,,262,1,,If,,if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,added,,,263,1,,Assign,,e.encoding = 'base64' if e.is_binary else 'utf-8'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,added,,,264,1,,If,,if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,added,,,265,1,,Assign,,e.eol_style = 'n/a' if e.is_binary else 'LF'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,added,,,59,1,,FunctionDef,,"def detect_format(self, text: str) -> bool: """"""Detect if text appears to use '# FILE:' markers."""""" for line in text.splitlines()[:20]: if self.FILE_PATTERN.match(line): return True return False"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,added,,,60,1,,Expr,,"""Detect if text appears to use '# FILE:' markers."""
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,added,,,61,1,,For,,for line in text.splitlines()[:20]: if self.FILE_PATTERN.match(line): return True
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,added,,,62,1,,If,,if self.FILE_PATTERN.match(line): return True
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,added,,,63,1,,Return,,return True
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,added,,,64,1,,Return,,return False
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,147,1,,FunctionDef,,"def format_manifest(self, manifest: BundleManifest) -> str: """""" Convert a BundleManifest to plain-marker text. Always writes 'bundle_format_diagnostic.log' with detailed entry info. """""" self._validate_before_format(manifest) import logging logger = logging.getLogger('bundle.format_diagnostic') logger.setLevel(logging.DEBUG) if not logger.handlers: fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8') fh.setLevel(logging.DEBUG) fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s') fh.setFormatter(fmt) logger.addHandler(fh) logger.propagate = False logger.info('=' * 80) logger.info('STARTING format_manifest()') logger.info(f'Manifest contains {len(manifest.entries)} entries') logger.info('=' * 80) border = '# ' + '=' * 67 out: List[str] = [] for idx, entry in enumerate(manifest.entries): logger.info(f'\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---') logger.info(f' Path: {entry.path}') logger.info(f' Binary: {entry.is_binary}') logger.info(f' Encoding: {entry.encoding}') logger.info(f' EOL: {entry.eol_style}') logger.info(f' Content length: {len(entry.content)} chars') logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}') logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}') tail = entry.content[-50:] if entry.content else '' logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}') mode = 'binary' if entry.is_binary else 'text' encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8') eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF') header = f'{border}\n# FILE: {entry.path}\n# META: encoding={encoding}; eol={eol}; mode={mode}\n{border}\n' if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\n'): block += '\n' if idx < len(manifest.entries) - 1: block += '' out.append(block) logger.info('COMPLETED format_manifest()') return ''.join(out)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,155,1,,Import,,import logging
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,157,1,,Assign,,logger = logging.getLogger('bundle.format_diagnostic')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,158,1,,Expr,,logger.setLevel(logging.DEBUG)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,164,1,,Expr,,logger.addHandler(fh)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,167,1,,Expr,,logger.info('=' * 80)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,169,1,,Expr,,logger.info(f'Manifest contains {len(manifest.entries)} entries')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,178,1,,Expr,,logger.info(f' Binary: {entry.is_binary}')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,181,1,,Expr,,logger.info(f' Content length: {len(entry.content)} chars')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,182,1,,Expr,,logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,183,1,,Expr,,logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,184,1,,Assign,,tail = entry.content[-50:] if entry.content else ''
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,185,1,,Expr,,logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,187,1,,Assign,,mode = 'binary' if entry.is_binary else 'text'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,188,1,,Assign,,encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,189,1,,Assign,,eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,191,1,,Assign,,header = f'{border}\n# FILE: {entry.path}\n# META: encoding={encoding}; eol={eol}; mode={mode}\n{border}\n'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,198,1,,If,,"if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\n'): block += '\n'"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,199,1,,If,,"if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,200,1,,Assign,,payload = entry.content.strip()
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,201,1,,If,,"if isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,202,1,,Assign,,payload = base64.b64encode(bytes(entry.content)).decode('ascii')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,204,1,,Raise,,"raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,207,1,,Assign,,block = header + payload + '\n'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,209,1,,Assign,,"text = entry.content if isinstance(entry.content, str) else str(entry.content)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,210,1,,Assign,,block = header + text
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,211,1,,If,,if not block.endswith('\n'): block += '\n'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,212,1,,AugAssign,,block += '\n'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,214,1,,If,,if idx < len(manifest.entries) - 1: block += ''
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,215,1,,AugAssign,,block += ''
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,216,1,,Expr,,out.append(block)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,218,1,,Expr,,logger.info('COMPLETED format_manifest()')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,added,,,219,1,,Return,,return ''.join(out)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.get_capabilities,added,,,50,1,,FunctionDef,,"def get_capabilities(self) -> Dict[str, bool]: return {'supports_binary': True, 'supports_checksums': False, 'supports_metadata': True}"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.get_capabilities,added,,,51,1,,Return,,"return {'supports_binary': True, 'supports_checksums': False, 'supports_metadata': True}"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.get_display_name,added,,,47,1,,FunctionDef,,def get_display_name(self) -> str: return 'Plain Marker (Legacy)'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.get_display_name,added,,,48,1,,Return,,return 'Plain Marker (Legacy)'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,68,1,,FunctionDef,,"def parse_stream(self, text: str) -> BundleManifest: """""" Parse plain-marker bundle text into a BundleManifest. Rules: - '# FILE: <path>' begins a new file block. - '# META: key=value; ...' is optional; later keys override earlier. - Separator lines (====) are ignored. - Empty or dot-only paths after '# FILE:' are ignored. - Duplicate paths are consolidated with last-one-wins. """""" entries: List[BundleEntry] = [] current_block: Optional[Dict[str, str]] = None current_meta: Dict[str, str] = {} for line_no, line in enumerate(text.splitlines(keepends=True), start=1): m_file = self.FILE_PATTERN.match(line) if m_file: if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) raw_path = (m_file.group(1) or '').strip() if not raw_path or raw_path in {'.', './', '.\\', '/'}: current_block = None current_meta = {} continue current_block = {'path': raw_path, 'content': '', 'line_start': line_no} current_meta = {} continue m_meta = self.META_PATTERN.match(line) if m_meta and current_block is not None: current_meta.update(self._parse_meta(m_meta.group(1))) continue if self.HEADER_PATTERN.match(line): continue if current_block is not None: current_block['content'] += line if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) if not entries: raise ProfileParseError(self.profile_name, 'No files found in bundle', 0) seen = set() consolidated: List[BundleEntry] = [] for e in reversed(entries): if e.path not in seen: seen.add(e.path) consolidated.append(e) entries = list(reversed(consolidated)) return BundleManifest(entries=entries, profile=self.profile_name, metadata={'format_version': '1.x', 'parser': 'PlainMarkerProfile'})"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,81,1,,AnnAssign,,"current_meta: Dict[str, str] = {}"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,96,1,,If,,"if not raw_path or raw_path in {'.', './', '.\\', '/'}: current_block = None current_meta = {} continue"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,107,1,,Assign,,m_meta = self.META_PATTERN.match(line)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,108,1,,If,,if m_meta and current_block is not None: current_meta.update(self._parse_meta(m_meta.group(1))) continue
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,109,1,,Expr,,current_meta.update(self._parse_meta(m_meta.group(1)))
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,110,1,,Continue,,continue
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,113,1,,If,,if self.HEADER_PATTERN.match(line): continue
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,114,1,,Continue,,continue
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,117,1,,If,,if current_block is not None: current_block['content'] += line
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,118,1,,AugAssign,,current_block['content'] += line
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,121,1,,If,,"if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta))"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,122,1,,Assign,,"current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,125,1,,Expr,,"entries.append(self._finalize(current_block, current_meta))"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,127,1,,If,,"if not entries: raise ProfileParseError(self.profile_name, 'No files found in bundle', 0)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,128,1,,Raise,,"raise ProfileParseError(self.profile_name, 'No files found in bundle', 0)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,131,1,,Assign,,seen = set()
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,132,1,,AnnAssign,,consolidated: List[BundleEntry] = []
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,133,1,,For,,for e in reversed(entries): if e.path not in seen: seen.add(e.path) consolidated.append(e)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,134,1,,If,,if e.path not in seen: seen.add(e.path) consolidated.append(e)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,135,1,,Expr,,seen.add(e.path)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,136,1,,Expr,,consolidated.append(e)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,137,1,,Assign,,entries = list(reversed(consolidated))
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,added,,,139,1,,Return,,"return BundleManifest(entries=entries, profile=self.profile_name, metadata={'format_version': '1.x', 'parser': 'PlainMarkerProfile'})"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.profile_name,added,,,44,1,,FunctionDef,,@property def profile_name(self) -> str: return 'plain_marker'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.profile_name,added,,,45,1,,Return,,return 'plain_marker'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,added,,,18,1,,Import,,import base64
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,added,,,20,1,,Import,,import re
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,added,,,25,1,,Expr,,"sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,added,,,27,1,,ImportFrom,,from core.profiles.base import ProfileBase
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,added,,,28,1,,ImportFrom,,"from core.models import BundleManifest, BundleEntry"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,added,,,29,1,,ImportFrom,,"from core.exceptions import ProfileParseError, ProfileFormatError"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,removed,26,1,,,ClassDef,,"class PlainMarkerProfile(ProfileBase): HEADER_PATTERN = re.compile('^\\s*#\\s*={50,}\\s*$') FILE_PATTERN = re.compile('^\\s*#\\s*FILE\\s*:\\s*(.+?)\\s*$', re.IGNORECASE) META_PATTERN = re.compile('^\\s*#\\s*META\\s*:\\s*(.+?)\\s*$', re.IGNORECASE) META_FIELD_PATTERN = re.compile('(\\w+)\\s*=\\s*([^;]+)') @property def profile_name(self) -> str: return 'plain_marker' def get_display_name(self) -> str: return 'Plain Marker (Legacy)' def get_capabilities(self) -> Dict[str, bool]: return {'supports_binary': True, 'supports_checksums': False, 'supports_metadata': True} def detect_format(self, text: str) -> bool: for line in text.splitlines()[:20]: if self.FILE_PATTERN.match(line): return True return False def parse_stream(self, text: str) -> BundleManifest: entries: List[BundleEntry] = [] current_block: Optional[Dict[str, str]] = None current_meta: Dict[str, str] = {} for line_no, line in enumerate(text.splitlines(keepends=True), start=1): m_file = self.FILE_PATTERN.match(line) if m_file: if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) path = (m_file.group(1) or '').strip() if not path or path in {'.', './', '.\\', '/'}: current_block = None current_meta = {} continue current_block = {'path': path, 'content': '', 'line_start': line_no} current_meta = {} continue m_meta = self.META_PATTERN.match(line) if m_meta and current_block is not None: current_meta.update(self._parse_meta(m_meta.group(1))) continue if self.HEADER_PATTERN.match(line): continue if current_block is not None: current_block['content'] += line if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) if not entries: raise ProfileParseError(self.profile_name, 'No files found in bundle', 0) seen = set() consolidated: List[BundleEntry] = [] for e in reversed(entries): if e.path not in seen: seen.add(e.path) consolidated.append(e) entries = list(reversed(consolidated)) return BundleManifest(entries=entries, profile=self.profile_name, metadata={'format_version': '1.x', 'parser': 'PlainMarkerProfile'}) def format_manifest(self, manifest: BundleManifest) -> str: self._validate_before_format(manifest) import logging logger = logging.getLogger('bundle.format_diagnostic') logger.setLevel(logging.DEBUG) if not logger.handlers: fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8') fh.setLevel(logging.DEBUG) fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s') fh.setFormatter(fmt) logger.addHandler(fh) logger.propagate = False logger.info('=' * 80) logger.info('STARTING format_manifest()') logger.info(f'Manifest contains {len(manifest.entries)} entries') logger.info('=' * 80) border = '# ' + '=' * 67 out: List[str] = [] for idx, entry in enumerate(manifest.entries): logger.info(f'\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---') logger.info(f' Path: {entry.path}') logger.info(f' Binary: {entry.is_binary}') logger.info(f' Encoding: {entry.encoding}') logger.info(f' EOL: {entry.eol_style}') logger.info(f' Content length: {len(entry.content)} chars') logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}') logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}') tail = entry.content[-50:] if entry.content else '' logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}') mode = 'binary' if entry.is_binary else 'text' encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8') eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF') header = f'{border}\n# FILE: {entry.path}\n# META: encoding={encoding}; eol={eol}; mode={mode}\n{border}\n' if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\n'): block += '\n' if idx < len(manifest.entries) - 1: block += '' out.append(block) logger.info('COMPLETED format_manifest()') return ''.join(out) def _parse_meta(self, meta_str: str) -> Dict[str, str]: result = {} for k, v in self.META_FIELD_PATTERN.findall(meta_str): result[k.strip().lower()] = v.strip() return result def _trim_header_spacing(self, content: str, meta: Dict[str, str]) -> str: trailing = (meta.get('trailing') or '').strip().lower() if content.endswith('\n\n'): return content[:-2] if trailing == 'false' else content[:-1] if trailing == 'false' and content.endswith('\n'): return content[:-1] return content def _finalize(self, raw: Dict[str, str], meta: Dict[str, str]) -> BundleEntry: path = raw['path'].replace('\\', '/') mode = (meta.get('mode') or '').lower() encoding = (meta.get('encoding') or ('base64' if mode == 'binary' else 'utf-8')).lower() is_binary = mode == 'binary' or encoding == 'base64' eol = meta.get('eol') or ('n/a' if is_binary else 'LF') return BundleEntry(path=path, content=raw.get('content', ''), is_binary=is_binary, encoding=encoding, eol_style=eol, checksum=None) def _validate_before_format(self, manifest: BundleManifest) -> None: for e in manifest.entries: if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes') if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8' if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF'",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,removed,27,1,,,Assign,,"HEADER_PATTERN = re.compile('^\\s*#\\s*={50,}\\s*$')",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,removed,28,1,,,Assign,,"FILE_PATTERN = re.compile('^\\s*#\\s*FILE\\s*:\\s*(.+?)\\s*$', re.IGNORECASE)",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,removed,29,1,,,Assign,,"META_PATTERN = re.compile('^\\s*#\\s*META\\s*:\\s*(.+?)\\s*$', re.IGNORECASE)",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,removed,30,1,,,Assign,,META_FIELD_PATTERN = re.compile('(\\w+)\\s*=\\s*([^;]+)'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,removed,197,1,,,FunctionDef,,"def _finalize(self, raw: Dict[str, str], meta: Dict[str, str]) -> BundleEntry: path = raw['path'].replace('\\', '/') mode = (meta.get('mode') or '').lower() encoding = (meta.get('encoding') or ('base64' if mode == 'binary' else 'utf-8')).lower() is_binary = mode == 'binary' or encoding == 'base64' eol = meta.get('eol') or ('n/a' if is_binary else 'LF') return BundleEntry(path=path, content=raw.get('content', ''), is_binary=is_binary, encoding=encoding, eol_style=eol, checksum=None)",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,removed,198,1,,,Assign,,"path = raw['path'].replace('\\', '/')",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,removed,199,1,,,Assign,,mode = (meta.get('mode') or '').lower(),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,removed,200,1,,,Assign,,encoding = (meta.get('encoding') or ('base64' if mode == 'binary' else 'utf-8')).lower(),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,removed,201,1,,,Assign,,is_binary = mode == 'binary' or encoding == 'base64',
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,removed,202,1,,,Assign,,eol = meta.get('eol') or ('n/a' if is_binary else 'LF'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,removed,204,1,,,Return,,"return BundleEntry(path=path, content=raw.get('content', ''), is_binary=is_binary, encoding=encoding, eol_style=eol, checksum=None)",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._parse_meta,removed,183,1,,,FunctionDef,,"def _parse_meta(self, meta_str: str) -> Dict[str, str]: result = {} for k, v in self.META_FIELD_PATTERN.findall(meta_str): result[k.strip().lower()] = v.strip() return result",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._parse_meta,removed,184,1,,,Assign,,result = {},
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._parse_meta,removed,185,1,,,For,,"for k, v in self.META_FIELD_PATTERN.findall(meta_str): result[k.strip().lower()] = v.strip()",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._parse_meta,removed,186,1,,,Assign,,result[k.strip().lower()] = v.strip(),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._parse_meta,removed,187,1,,,Return,,return result,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,removed,189,1,,,FunctionDef,,"def _trim_header_spacing(self, content: str, meta: Dict[str, str]) -> str: trailing = (meta.get('trailing') or '').strip().lower() if content.endswith('\n\n'): return content[:-2] if trailing == 'false' else content[:-1] if trailing == 'false' and content.endswith('\n'): return content[:-1] return content",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,removed,190,1,,,Assign,,trailing = (meta.get('trailing') or '').strip().lower(),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,removed,191,1,,,If,,if content.endswith('\n\n'): return content[:-2] if trailing == 'false' else content[:-1],
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,removed,192,1,,,Return,,return content[:-2] if trailing == 'false' else content[:-1],
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,removed,193,1,,,If,,if trailing == 'false' and content.endswith('\n'): return content[:-1],
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,removed,194,1,,,Return,,return content[:-1],
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,removed,195,1,,,Return,,return content,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,removed,213,1,,,FunctionDef,,"def _validate_before_format(self, manifest: BundleManifest) -> None: for e in manifest.entries: if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes') if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8' if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF'",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,removed,214,1,,,For,,"for e in manifest.entries: if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes') if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8' if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF'",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,removed,215,1,,,If,,"if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes')",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,removed,216,1,,,Raise,,"raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes')",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,removed,217,1,,,If,,if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8',
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,removed,218,1,,,Assign,,e.encoding = 'base64' if e.is_binary else 'utf-8',
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,removed,219,1,,,If,,if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF',
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,removed,220,1,,,Assign,,e.eol_style = 'n/a' if e.is_binary else 'LF',
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,removed,43,1,,,FunctionDef,,"def detect_format(self, text: str) -> bool: for line in text.splitlines()[:20]: if self.FILE_PATTERN.match(line): return True return False",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,removed,44,1,,,For,,for line in text.splitlines()[:20]: if self.FILE_PATTERN.match(line): return True,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,removed,45,1,,,If,,if self.FILE_PATTERN.match(line): return True,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,removed,46,1,,,Return,,return True,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,removed,47,1,,,Return,,return False,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,113,1,,,FunctionDef,,"def format_manifest(self, manifest: BundleManifest) -> str: self._validate_before_format(manifest) import logging logger = logging.getLogger('bundle.format_diagnostic') logger.setLevel(logging.DEBUG) if not logger.handlers: fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8') fh.setLevel(logging.DEBUG) fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s') fh.setFormatter(fmt) logger.addHandler(fh) logger.propagate = False logger.info('=' * 80) logger.info('STARTING format_manifest()') logger.info(f'Manifest contains {len(manifest.entries)} entries') logger.info('=' * 80) border = '# ' + '=' * 67 out: List[str] = [] for idx, entry in enumerate(manifest.entries): logger.info(f'\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---') logger.info(f' Path: {entry.path}') logger.info(f' Binary: {entry.is_binary}') logger.info(f' Encoding: {entry.encoding}') logger.info(f' EOL: {entry.eol_style}') logger.info(f' Content length: {len(entry.content)} chars') logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}') logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}') tail = entry.content[-50:] if entry.content else '' logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}') mode = 'binary' if entry.is_binary else 'text' encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8') eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF') header = f'{border}\n# FILE: {entry.path}\n# META: encoding={encoding}; eol={eol}; mode={mode}\n{border}\n' if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\n'): block += '\n' if idx < len(manifest.entries) - 1: block += '' out.append(block) logger.info('COMPLETED format_manifest()') return ''.join(out)",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,114,1,,,Expr,,self._validate_before_format(manifest),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,116,1,,,Import,,import logging,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,118,1,,,Assign,,logger = logging.getLogger('bundle.format_diagnostic'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,119,1,,,Expr,,logger.setLevel(logging.DEBUG),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,120,1,,,If,,"if not logger.handlers: fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8') fh.setLevel(logging.DEBUG) fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s') fh.setFormatter(fmt) logger.addHandler(fh)",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,121,1,,,Assign,,"fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8')",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,122,1,,,Expr,,fh.setLevel(logging.DEBUG),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,123,1,,,Assign,,fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,124,1,,,Expr,,fh.setFormatter(fmt),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,125,1,,,Expr,,logger.addHandler(fh),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,126,1,,,Assign,,logger.propagate = False,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,128,1,,,Expr,,logger.info('=' * 80),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,129,1,,,Expr,,logger.info('STARTING format_manifest()'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,130,1,,,Expr,,logger.info(f'Manifest contains {len(manifest.entries)} entries'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,131,1,,,Expr,,logger.info('=' * 80),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,133,1,,,Assign,,border = '# ' + '=' * 67,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,134,1,,,AnnAssign,,out: List[str] = [],
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,136,1,,,For,,"for idx, entry in enumerate(manifest.entries): logger.info(f'\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---') logger.info(f' Path: {entry.path}') logger.info(f' Binary: {entry.is_binary}') logger.info(f' Encoding: {entry.encoding}') logger.info(f' EOL: {entry.eol_style}') logger.info(f' Content length: {len(entry.content)} chars') logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}') logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}') tail = entry.content[-50:] if entry.content else '' logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}') mode = 'binary' if entry.is_binary else 'text' encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8') eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF') header = f'{border}\n# FILE: {entry.path}\n# META: encoding={encoding}; eol={eol}; mode={mode}\n{border}\n' if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\n'): block += '\n' if idx < len(manifest.entries) - 1: block += '' out.append(block)",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,137,1,,,Expr,,logger.info(f'\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,138,1,,,Expr,,logger.info(f' Path: {entry.path}'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,139,1,,,Expr,,logger.info(f' Binary: {entry.is_binary}'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,140,1,,,Expr,,logger.info(f' Encoding: {entry.encoding}'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,141,1,,,Expr,,logger.info(f' EOL: {entry.eol_style}'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,142,1,,,Expr,,logger.info(f' Content length: {len(entry.content)} chars'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,143,1,,,Expr,,logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,144,1,,,Expr,,logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,145,1,,,Assign,,tail = entry.content[-50:] if entry.content else '',
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,146,1,,,Expr,,logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,149,1,,,Assign,,encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,150,1,,,Assign,,eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF'),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,removed,171,1,,,Assign,,block = header + text,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.get_capabilities,removed,39,1,,,FunctionDef,,"def get_capabilities(self) -> Dict[str, bool]: return {'supports_binary': True, 'supports_checksums': False, 'supports_metadata': True}",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.get_capabilities,removed,40,1,,,Return,,"return {'supports_binary': True, 'supports_checksums': False, 'supports_metadata': True}",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.get_display_name,removed,36,1,,,FunctionDef,,def get_display_name(self) -> str: return 'Plain Marker (Legacy)',
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.get_display_name,removed,37,1,,,Return,,return 'Plain Marker (Legacy)',
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,50,1,,,FunctionDef,,"def parse_stream(self, text: str) -> BundleManifest: entries: List[BundleEntry] = [] current_block: Optional[Dict[str, str]] = None current_meta: Dict[str, str] = {} for line_no, line in enumerate(text.splitlines(keepends=True), start=1): m_file = self.FILE_PATTERN.match(line) if m_file: if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) path = (m_file.group(1) or '').strip() if not path or path in {'.', './', '.\\', '/'}: current_block = None current_meta = {} continue current_block = {'path': path, 'content': '', 'line_start': line_no} current_meta = {} continue m_meta = self.META_PATTERN.match(line) if m_meta and current_block is not None: current_meta.update(self._parse_meta(m_meta.group(1))) continue if self.HEADER_PATTERN.match(line): continue if current_block is not None: current_block['content'] += line if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) if not entries: raise ProfileParseError(self.profile_name, 'No files found in bundle', 0) seen = set() consolidated: List[BundleEntry] = [] for e in reversed(entries): if e.path not in seen: seen.add(e.path) consolidated.append(e) entries = list(reversed(consolidated)) return BundleManifest(entries=entries, profile=self.profile_name, metadata={'format_version': '1.x', 'parser': 'PlainMarkerProfile'})",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,51,1,,,AnnAssign,,entries: List[BundleEntry] = [],
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,52,1,,,AnnAssign,,"current_block: Optional[Dict[str, str]] = None",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,53,1,,,AnnAssign,,"current_meta: Dict[str, str] = {}",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,55,1,,,For,,"for line_no, line in enumerate(text.splitlines(keepends=True), start=1): m_file = self.FILE_PATTERN.match(line) if m_file: if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) path = (m_file.group(1) or '').strip() if not path or path in {'.', './', '.\\', '/'}: current_block = None current_meta = {} continue current_block = {'path': path, 'content': '', 'line_start': line_no} current_meta = {} continue m_meta = self.META_PATTERN.match(line) if m_meta and current_block is not None: current_meta.update(self._parse_meta(m_meta.group(1))) continue if self.HEADER_PATTERN.match(line): continue if current_block is not None: current_block['content'] += line",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,56,1,,,Assign,,m_file = self.FILE_PATTERN.match(line),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,57,1,,,If,,"if m_file: if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) path = (m_file.group(1) or '').strip() if not path or path in {'.', './', '.\\', '/'}: current_block = None current_meta = {} continue current_block = {'path': path, 'content': '', 'line_start': line_no} current_meta = {} continue",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,59,1,,,If,,"if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta))",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,60,1,,,Assign,,"current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta)",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,63,1,,,Expr,,"entries.append(self._finalize(current_block, current_meta))",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,66,1,,,Assign,,path = (m_file.group(1) or '').strip(),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,67,1,,,If,,"if not path or path in {'.', './', '.\\', '/'}: current_block = None current_meta = {} continue",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,70,1,,,Assign,,current_meta = {},
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,71,1,,,Continue,,continue,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,73,1,,,Assign,,"current_block = {'path': path, 'content': '', 'line_start': line_no}",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,74,1,,,Assign,,current_meta = {},
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,75,1,,,Continue,,continue,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,77,1,,,Assign,,m_meta = self.META_PATTERN.match(line),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,78,1,,,If,,if m_meta and current_block is not None: current_meta.update(self._parse_meta(m_meta.group(1))) continue,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,82,1,,,If,,if self.HEADER_PATTERN.match(line): continue,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,94,1,,,If,,"if not entries: raise ProfileParseError(self.profile_name, 'No files found in bundle', 0)",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,101,1,,,If,,if e.path not in seen: seen.add(e.path) consolidated.append(e),
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,removed,106,1,,,Return,,"return BundleManifest(entries=entries, profile=self.profile_name, metadata={'format_version': '1.x', 'parser': 'PlainMarkerProfile'})",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.profile_name,removed,33,1,,,FunctionDef,,@property def profile_name(self) -> str: return 'plain_marker',
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.profile_name,removed,34,1,,,Return,,return 'plain_marker',
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,removed,12,1,,,Import,,import base64,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,removed,13,1,,,Import,,import os,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,removed,14,1,,,Import,,import re,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,removed,15,1,,,Import,,import sys,
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,removed,23,1,,,ImportFrom,,"from core.exceptions import ProfileParseError, ProfileFormatError",
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,148,1,148,1,Assign,Expr,mode = 'binary' if entry.is_binary else 'text',"""\n Convert a BundleManifest to plain-marker text.\n Always writes 'bundle_format_diagnostic.log' with detailed entry info.\n """
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,152,1,152,1,Assign,Expr,header = f'{border}\n# FILE: {entry.path}\n# META: encoding={encoding}; eol={eol}; mode={mode}\n{border}\n',self._validate_before_format(manifest)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,159,1,159,1,If,If,"if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\n'): block += '\n'","if not logger.handlers: fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8') fh.setLevel(logging.DEBUG) fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s') fh.setFormatter(fmt) logger.addHandler(fh)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,160,1,160,1,If,Assign,"if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')","fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,161,1,161,1,Assign,Expr,payload = entry.content.strip(),fh.setLevel(logging.DEBUG)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,162,1,162,1,If,Assign,"if isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')",fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,163,1,163,1,Assign,Expr,payload = base64.b64encode(bytes(entry.content)).decode('ascii'),fh.setFormatter(fmt)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,165,1,165,1,Raise,Assign,"raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')",logger.propagate = False
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,168,1,168,1,Assign,Expr,block = header + payload + '\n',logger.info('STARTING format_manifest()')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,170,1,170,1,Assign,Expr,"text = entry.content if isinstance(entry.content, str) else str(entry.content)",logger.info('=' * 80)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,172,1,172,1,If,Assign,if not block.endswith('\n'): block += '\n',border = '# ' + '=' * 67
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,173,1,173,1,AugAssign,AnnAssign,block += '\n',out: List[str] = []
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,175,1,175,1,If,For,if idx < len(manifest.entries) - 1: block += '',"for idx, entry in enumerate(manifest.entries): logger.info(f'\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---') logger.info(f' Path: {entry.path}') logger.info(f' Binary: {entry.is_binary}') logger.info(f' Encoding: {entry.encoding}') logger.info(f' EOL: {entry.eol_style}') logger.info(f' Content length: {len(entry.content)} chars') logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}') logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}') tail = entry.content[-50:] if entry.content else '' logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}') mode = 'binary' if entry.is_binary else 'text' encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8') eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF') header = f'{border}\n# FILE: {entry.path}\n# META: encoding={encoding}; eol={eol}; mode={mode}\n{border}\n' if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\n'): block += '\n' if idx < len(manifest.entries) - 1: block += '' out.append(block)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,176,1,176,1,AugAssign,Expr,block += '',logger.info(f'\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,177,1,177,1,Expr,Expr,out.append(block),logger.info(f' Path: {entry.path}')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,179,1,179,1,Expr,Expr,logger.info('COMPLETED format_manifest()'),logger.info(f' Encoding: {entry.encoding}')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,changed,180,1,180,1,Return,Expr,return ''.join(out),logger.info(f' EOL: {entry.eol_style}')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,changed,69,1,69,1,Assign,Expr,current_block = None,"""\n Parse plain-marker bundle text into a BundleManifest.\n\n Rules:\n - '# FILE: <path>' begins a new file block.\n - '# META: key=value; ...' is optional; later keys override earlier.\n - Separator lines (====) are ignored.\n - Empty or dot-only paths after '# FILE:' are ignored.\n - Duplicate paths are consolidated with last-one-wins.\n """
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,changed,79,1,79,1,Expr,AnnAssign,current_meta.update(self._parse_meta(m_meta.group(1))),entries: List[BundleEntry] = []
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,changed,80,1,80,1,Continue,AnnAssign,continue,"current_block: Optional[Dict[str, str]] = None"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,changed,83,1,83,1,Continue,For,continue,"for line_no, line in enumerate(text.splitlines(keepends=True), start=1): m_file = self.FILE_PATTERN.match(line) if m_file: if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) raw_path = (m_file.group(1) or '').strip() if not raw_path or raw_path in {'.', './', '.\\', '/'}: current_block = None current_meta = {} continue current_block = {'path': raw_path, 'content': '', 'line_start': line_no} current_meta = {} continue m_meta = self.META_PATTERN.match(line) if m_meta and current_block is not None: current_meta.update(self._parse_meta(m_meta.group(1))) continue if self.HEADER_PATTERN.match(line): continue if current_block is not None: current_block['content'] += line"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,changed,85,1,85,1,If,Assign,if current_block is not None: current_block['content'] += line,m_file = self.FILE_PATTERN.match(line)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,changed,86,1,86,1,AugAssign,If,current_block['content'] += line,"if m_file: if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) raw_path = (m_file.group(1) or '').strip() if not raw_path or raw_path in {'.', './', '.\\', '/'}: current_block = None current_meta = {} continue current_block = {'path': raw_path, 'content': '', 'line_start': line_no} current_meta = {} continue"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,changed,95,1,95,1,Raise,Assign,"raise ProfileParseError(self.profile_name, 'No files found in bundle', 0)",raw_path = (m_file.group(1) or '').strip()
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,changed,98,1,98,1,Assign,Assign,seen = set(),current_block = None
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,changed,99,1,99,1,AnnAssign,Assign,consolidated: List[BundleEntry] = [],current_meta = {}
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,changed,100,1,100,1,For,Continue,for e in reversed(entries): if e.path not in seen: seen.add(e.path) consolidated.append(e),continue
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,changed,102,1,102,1,Expr,Assign,seen.add(e.path),"current_block = {'path': raw_path, 'content': '', 'line_start': line_no}"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,changed,103,1,103,1,Expr,Assign,consolidated.append(e),current_meta = {}
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,changed,104,1,104,1,Assign,Continue,entries = list(reversed(consolidated)),continue
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,changed,16,1,16,1,ImportFrom,ImportFrom,"from typing import Dict, List, Optional",from __future__ import annotations
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,changed,19,1,19,1,Expr,Import,"sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))",import os
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,changed,21,1,21,1,ImportFrom,Import,from core.profiles.base import ProfileBase,import sys
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,changed,22,1,22,1,ImportFrom,ImportFrom,"from core.models import BundleManifest, BundleEntry","from typing import Dict, List, Optional"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,moved,193,1,237,1,If,If,if trailing == 'false' and content.endswith('\n'): return content[:-1],if trailing == 'false' and content.endswith('\n'): return content[:-1]
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,160,1,199,1,If,If,"if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')","if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,94,1,127,1,If,If,"if not entries: raise ProfileParseError(self.profile_name, 'No files found in bundle', 0)","if not entries: raise ProfileParseError(self.profile_name, 'No files found in bundle', 0)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,102,1,135,1,Expr,Expr,seen.add(e.path),seen.add(e.path)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,103,1,136,1,Expr,Expr,consolidated.append(e),consolidated.append(e)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,143,1,182,1,Expr,Expr,logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}'),logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,146,1,185,1,Expr,Expr,logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}'),logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,moved,21,1,27,1,ImportFrom,ImportFrom,from core.profiles.base import ProfileBase,from core.profiles.base import ProfileBase
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,100,1,133,1,For,For,for e in reversed(entries): if e.path not in seen: seen.add(e.path) consolidated.append(e),for e in reversed(entries): if e.path not in seen: seen.add(e.path) consolidated.append(e)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,129,1,168,1,Expr,Expr,logger.info('STARTING format_manifest()'),logger.info('STARTING format_manifest()')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,moved,30,1,39,1,Assign,Assign,META_FIELD_PATTERN = re.compile('(\\w+)\\s*=\\s*([^;]+)'),META_FIELD_PATTERN = re.compile('(\\w+)\\s*=\\s*([^;]+)')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,moved,44,1,61,1,For,For,for line in text.splitlines()[:20]: if self.FILE_PATTERN.match(line): return True,for line in text.splitlines()[:20]: if self.FILE_PATTERN.match(line): return True
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,moved,220,1,265,1,Assign,Assign,e.eol_style = 'n/a' if e.is_binary else 'LF',e.eol_style = 'n/a' if e.is_binary else 'LF'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,101,1,134,1,If,If,if e.path not in seen: seen.add(e.path) consolidated.append(e),if e.path not in seen: seen.add(e.path) consolidated.append(e)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,53,1,81,1,AnnAssign,AnnAssign,"current_meta: Dict[str, str] = {}","current_meta: Dict[str, str] = {}"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,moved,197,1,241,1,FunctionDef,FunctionDef,"def _finalize(self, raw: Dict[str, str], meta: Dict[str, str]) -> BundleEntry: path = raw['path'].replace('\\', '/') mode = (meta.get('mode') or '').lower() encoding = (meta.get('encoding') or ('base64' if mode == 'binary' else 'utf-8')).lower() is_binary = mode == 'binary' or encoding == 'base64' eol = meta.get('eol') or ('n/a' if is_binary else 'LF') return BundleEntry(path=path, content=raw.get('content', ''), is_binary=is_binary, encoding=encoding, eol_style=eol, checksum=None)","def _finalize(self, raw: Dict[str, str], meta: Dict[str, str]) -> BundleEntry: path = raw['path'].replace('\\', '/') mode = (meta.get('mode') or '').lower() encoding = (meta.get('encoding') or ('base64' if mode == 'binary' else 'utf-8')).lower() is_binary = mode == 'binary' or encoding == 'base64' eol = meta.get('eol') or ('n/a' if is_binary else 'LF') return BundleEntry(path=path, content=raw.get('content', ''), is_binary=is_binary, encoding=encoding, eol_style=eol, checksum=None)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,moved,199,1,243,1,Assign,Assign,mode = (meta.get('mode') or '').lower(),mode = (meta.get('mode') or '').lower()
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,moved,194,1,238,1,Return,Return,return content[:-1],return content[:-1]
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,145,1,184,1,Assign,Assign,tail = entry.content[-50:] if entry.content else '',tail = entry.content[-50:] if entry.content else ''
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,moved,191,1,235,1,If,If,if content.endswith('\n\n'): return content[:-2] if trailing == 'false' else content[:-1],if content.endswith('\n\n'): return content[:-2] if trailing == 'false' else content[:-1]
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.profile_name,moved,33,1,44,1,FunctionDef,FunctionDef,@property def profile_name(self) -> str: return 'plain_marker',@property def profile_name(self) -> str: return 'plain_marker'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,moved,190,1,234,1,Assign,Assign,trailing = (meta.get('trailing') or '').strip().lower(),trailing = (meta.get('trailing') or '').strip().lower()
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,moved,217,1,262,1,If,If,if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8',if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,134,1,173,1,AnnAssign,AnnAssign,out: List[str] = [],out: List[str] = []
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,180,1,219,1,Return,Return,return ''.join(out),return ''.join(out)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,162,1,201,1,If,If,"if isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')","if isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.get_capabilities,moved,39,1,50,1,FunctionDef,FunctionDef,"def get_capabilities(self) -> Dict[str, bool]: return {'supports_binary': True, 'supports_checksums': False, 'supports_metadata': True}","def get_capabilities(self) -> Dict[str, bool]: return {'supports_binary': True, 'supports_checksums': False, 'supports_metadata': True}"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,moved,27,1,36,1,Assign,Assign,"HEADER_PATTERN = re.compile('^\\s*#\\s*={50,}\\s*$')","HEADER_PATTERN = re.compile('^\\s*#\\s*={50,}\\s*$')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,116,1,155,1,Import,Import,import logging,import logging
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,moved,23,1,29,1,ImportFrom,ImportFrom,"from core.exceptions import ProfileParseError, ProfileFormatError","from core.exceptions import ProfileParseError, ProfileFormatError"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,78,1,108,1,If,If,if m_meta and current_block is not None: current_meta.update(self._parse_meta(m_meta.group(1))) continue,if m_meta and current_block is not None: current_meta.update(self._parse_meta(m_meta.group(1))) continue
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,51,1,79,1,AnnAssign,AnnAssign,entries: List[BundleEntry] = [],entries: List[BundleEntry] = []
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,173,1,212,1,AugAssign,AugAssign,block += '\n',block += '\n'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,moved,215,1,260,1,If,If,"if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes')","if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,63,1,92,1,Expr,Expr,"entries.append(self._finalize(current_block, current_meta))","entries.append(self._finalize(current_block, current_meta))"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,139,1,178,1,Expr,Expr,logger.info(f' Binary: {entry.is_binary}'),logger.info(f' Binary: {entry.is_binary}')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,163,1,202,1,Assign,Assign,payload = base64.b64encode(bytes(entry.content)).decode('ascii'),payload = base64.b64encode(bytes(entry.content)).decode('ascii')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,moved,14,1,20,1,Import,Import,import re,import re
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,142,1,181,1,Expr,Expr,logger.info(f' Content length: {len(entry.content)} chars'),logger.info(f' Content length: {len(entry.content)} chars')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,125,1,164,1,Expr,Expr,logger.addHandler(fh),logger.addHandler(fh)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,148,1,187,1,Assign,Assign,mode = 'binary' if entry.is_binary else 'text',mode = 'binary' if entry.is_binary else 'text'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,moved,45,1,62,1,If,If,if self.FILE_PATTERN.match(line): return True,if self.FILE_PATTERN.match(line): return True
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,150,1,189,1,Assign,Assign,eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF'),eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,114,1,152,1,Expr,Expr,self._validate_before_format(manifest),self._validate_before_format(manifest)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,52,1,80,1,AnnAssign,AnnAssign,"current_block: Optional[Dict[str, str]] = None","current_block: Optional[Dict[str, str]] = None"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,179,1,218,1,Expr,Expr,logger.info('COMPLETED format_manifest()'),logger.info('COMPLETED format_manifest()')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,98,1,131,1,Assign,Assign,seen = set(),seen = set()
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,moved,201,1,245,1,Assign,Assign,is_binary = mode == 'binary' or encoding == 'base64',is_binary = mode == 'binary' or encoding == 'base64'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,161,1,200,1,Assign,Assign,payload = entry.content.strip(),payload = entry.content.strip()
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,moved,16,1,22,1,ImportFrom,ImportFrom,"from typing import Dict, List, Optional","from typing import Dict, List, Optional"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,128,1,167,1,Expr,Expr,logger.info('=' * 80),logger.info('=' * 80)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,131,1,167,1,Expr,Expr,logger.info('=' * 80),logger.info('=' * 80)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,137,1,176,1,Expr,Expr,logger.info(f'\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---'),logger.info(f'\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,moved,28,1,37,1,Assign,Assign,"FILE_PATTERN = re.compile('^\\s*#\\s*FILE\\s*:\\s*(.+?)\\s*$', re.IGNORECASE)","FILE_PATTERN = re.compile('^\\s*#\\s*FILE\\s*:\\s*(.+?)\\s*$', re.IGNORECASE)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,149,1,188,1,Assign,Assign,encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8'),encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,140,1,179,1,Expr,Expr,logger.info(f' Encoding: {entry.encoding}'),logger.info(f' Encoding: {entry.encoding}')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,106,1,139,1,Return,Return,"return BundleManifest(entries=entries, profile=self.profile_name, metadata={'format_version': '1.x', 'parser': 'PlainMarkerProfile'})","return BundleManifest(entries=entries, profile=self.profile_name, metadata={'format_version': '1.x', 'parser': 'PlainMarkerProfile'})"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,class:PlainMarkerProfile,moved,29,1,38,1,Assign,Assign,"META_PATTERN = re.compile('^\\s*#\\s*META\\s*:\\s*(.+?)\\s*$', re.IGNORECASE)","META_PATTERN = re.compile('^\\s*#\\s*META\\s*:\\s*(.+?)\\s*$', re.IGNORECASE)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.get_display_name,moved,37,1,48,1,Return,Return,return 'Plain Marker (Legacy)',return 'Plain Marker (Legacy)'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,176,1,215,1,AugAssign,AugAssign,block += '',block += ''
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,moved,22,1,28,1,ImportFrom,ImportFrom,"from core.models import BundleManifest, BundleEntry","from core.models import BundleManifest, BundleEntry"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,71,1,100,1,Continue,Continue,continue,continue
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,75,1,100,1,Continue,Continue,continue,continue
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,80,1,100,1,Continue,Continue,continue,continue
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,83,1,100,1,Continue,Continue,continue,continue
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,69,1,98,1,Assign,Assign,current_block = None,current_block = None
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,118,1,157,1,Assign,Assign,logger = logging.getLogger('bundle.format_diagnostic'),logger = logging.getLogger('bundle.format_diagnostic')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,175,1,214,1,If,If,if idx < len(manifest.entries) - 1: block += '',if idx < len(manifest.entries) - 1: block += ''
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.profile_name,moved,34,1,45,1,Return,Return,return 'plain_marker',return 'plain_marker'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,79,1,109,1,Expr,Expr,current_meta.update(self._parse_meta(m_meta.group(1))),current_meta.update(self._parse_meta(m_meta.group(1)))
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,144,1,183,1,Expr,Expr,logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}'),logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.get_display_name,moved,36,1,47,1,FunctionDef,FunctionDef,def get_display_name(self) -> str: return 'Plain Marker (Legacy)',def get_display_name(self) -> str: return 'Plain Marker (Legacy)'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,moved,19,1,25,1,Expr,Expr,"sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))","sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,172,1,211,1,If,If,if not block.endswith('\n'): block += '\n',if not block.endswith('\n'): block += '\n'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,122,1,161,1,Expr,Expr,fh.setLevel(logging.DEBUG),fh.setLevel(logging.DEBUG)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,126,1,165,1,Assign,Assign,logger.propagate = False,logger.propagate = False
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,120,1,159,1,If,If,"if not logger.handlers: fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8') fh.setLevel(logging.DEBUG) fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s') fh.setFormatter(fmt) logger.addHandler(fh)","if not logger.handlers: fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8') fh.setLevel(logging.DEBUG) fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s') fh.setFormatter(fmt) logger.addHandler(fh)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,104,1,137,1,Assign,Assign,entries = list(reversed(consolidated)),entries = list(reversed(consolidated))
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,77,1,107,1,Assign,Assign,m_meta = self.META_PATTERN.match(line),m_meta = self.META_PATTERN.match(line)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,59,1,88,1,If,If,"if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta))","if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta))"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,moved,198,1,242,1,Assign,Assign,"path = raw['path'].replace('\\', '/')","path = raw['path'].replace('\\', '/')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,moved,192,1,236,1,Return,Return,return content[:-2] if trailing == 'false' else content[:-1],return content[:-2] if trailing == 'false' else content[:-1]
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,86,1,118,1,AugAssign,AugAssign,current_block['content'] += line,current_block['content'] += line
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,moved,216,1,261,1,Raise,Raise,"raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes')","raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.get_capabilities,moved,40,1,51,1,Return,Return,"return {'supports_binary': True, 'supports_checksums': False, 'supports_metadata': True}","return {'supports_binary': True, 'supports_checksums': False, 'supports_metadata': True}"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,moved,214,1,259,1,For,For,"for e in manifest.entries: if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes') if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8' if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF'","for e in manifest.entries: if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes') if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8' if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF'"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,152,1,191,1,Assign,Assign,header = f'{border}\n# FILE: {entry.path}\n# META: encoding={encoding}; eol={eol}; mode={mode}\n{border}\n',header = f'{border}\n# FILE: {entry.path}\n# META: encoding={encoding}; eol={eol}; mode={mode}\n{border}\n'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,56,1,85,1,Assign,Assign,m_file = self.FILE_PATTERN.match(line),m_file = self.FILE_PATTERN.match(line)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,60,1,89,1,Assign,Assign,"current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta)","current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,moved,218,1,263,1,Assign,Assign,e.encoding = 'base64' if e.is_binary else 'utf-8',e.encoding = 'base64' if e.is_binary else 'utf-8'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,119,1,158,1,Expr,Expr,logger.setLevel(logging.DEBUG),logger.setLevel(logging.DEBUG)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,170,1,209,1,Assign,Assign,"text = entry.content if isinstance(entry.content, str) else str(entry.content)","text = entry.content if isinstance(entry.content, str) else str(entry.content)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,165,1,204,1,Raise,Raise,"raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')","raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,moved,47,1,64,1,Return,Return,return False,return False
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,85,1,117,1,If,If,if current_block is not None: current_block['content'] += line,if current_block is not None: current_block['content'] += line
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,123,1,162,1,Assign,Assign,fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'),fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,99,1,132,1,AnnAssign,AnnAssign,consolidated: List[BundleEntry] = [],consolidated: List[BundleEntry] = []
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,121,1,160,1,Assign,Assign,"fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8')","fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8')"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,159,1,198,1,If,If,"if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\n'): block += '\n'","if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\n'): block += '\n'"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,moved,204,1,248,1,Return,Return,"return BundleEntry(path=path, content=raw.get('content', ''), is_binary=is_binary, encoding=encoding, eol_style=eol, checksum=None)","return BundleEntry(path=path, content=raw.get('content', ''), is_binary=is_binary, encoding=encoding, eol_style=eol, checksum=None)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,171,1,210,1,Assign,Assign,block = header + text,block = header + text
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,moved,202,1,246,1,Assign,Assign,eol = meta.get('eol') or ('n/a' if is_binary else 'LF'),eol = meta.get('eol') or ('n/a' if is_binary else 'LF')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,moved,12,1,18,1,Import,Import,import base64,import base64
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,141,1,180,1,Expr,Expr,logger.info(f' EOL: {entry.eol_style}'),logger.info(f' EOL: {entry.eol_style}')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,95,1,128,1,Raise,Raise,"raise ProfileParseError(self.profile_name, 'No files found in bundle', 0)","raise ProfileParseError(self.profile_name, 'No files found in bundle', 0)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,moved,15,1,21,1,Import,Import,import sys,import sys
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._trim_header_spacing,moved,195,1,239,1,Return,Return,return content,return content
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,177,1,216,1,Expr,Expr,out.append(block),out.append(block)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,module,moved,13,1,19,1,Import,Import,import os,import os
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,82,1,113,1,If,If,if self.HEADER_PATTERN.match(line): continue,if self.HEADER_PATTERN.match(line): continue
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,124,1,163,1,Expr,Expr,fh.setFormatter(fmt),fh.setFormatter(fmt)
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,133,1,172,1,Assign,Assign,border = '# ' + '=' * 67,border = '# ' + '=' * 67
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,136,1,175,1,For,For,"for idx, entry in enumerate(manifest.entries): logger.info(f'\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---') logger.info(f' Path: {entry.path}') logger.info(f' Binary: {entry.is_binary}') logger.info(f' Encoding: {entry.encoding}') logger.info(f' EOL: {entry.eol_style}') logger.info(f' Content length: {len(entry.content)} chars') logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}') logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}') tail = entry.content[-50:] if entry.content else '' logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}') mode = 'binary' if entry.is_binary else 'text' encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8') eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF') header = f'{border}\n# FILE: {entry.path}\n# META: encoding={encoding}; eol={eol}; mode={mode}\n{border}\n' if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\n'): block += '\n' if idx < len(manifest.entries) - 1: block += '' out.append(block)","for idx, entry in enumerate(manifest.entries): logger.info(f'\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---') logger.info(f' Path: {entry.path}') logger.info(f' Binary: {entry.is_binary}') logger.info(f' Encoding: {entry.encoding}') logger.info(f' EOL: {entry.eol_style}') logger.info(f' Content length: {len(entry.content)} chars') logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}') logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}') tail = entry.content[-50:] if entry.content else '' logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}') mode = 'binary' if entry.is_binary else 'text' encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8') eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF') header = f'{border}\n# FILE: {entry.path}\n# META: encoding={encoding}; eol={eol}; mode={mode}\n{border}\n' if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\n'): block += '\n' if idx < len(manifest.entries) - 1: block += '' out.append(block)"
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,130,1,169,1,Expr,Expr,logger.info(f'Manifest contains {len(manifest.entries)} entries'),logger.info(f'Manifest contains {len(manifest.entries)} entries')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.detect_format,moved,46,1,63,1,Return,Return,return True,return True
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,70,1,99,1,Assign,Assign,current_meta = {},current_meta = {}
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.parse_stream,moved,74,1,99,1,Assign,Assign,current_meta = {},current_meta = {}
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._finalize,moved,200,1,244,1,Assign,Assign,encoding = (meta.get('encoding') or ('base64' if mode == 'binary' else 'utf-8')).lower(),encoding = (meta.get('encoding') or ('base64' if mode == 'binary' else 'utf-8')).lower()
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,168,1,207,1,Assign,Assign,block = header + payload + '\n',block = header + payload + '\n'
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile.format_manifest,moved,138,1,177,1,Expr,Expr,logger.info(f' Path: {entry.path}'),logger.info(f' Path: {entry.path}')
,mapped,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/plain_marker.py,C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py,method:PlainMarkerProfile._validate_before_format,moved,219,1,264,1,If,If,if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF',if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF'
