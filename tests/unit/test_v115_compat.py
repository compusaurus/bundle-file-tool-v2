# ============================================================================
# FILE: test_v115_compat.py
# RELPATH: bundle_file_tool_v2/tests/regression/test_v115_compat.py
# PROJECT: Bundle File Tool v2.1
# TEAM: Ringo (Owner), John (Lead Dev), George (Architect), Paul (Lead Analyst)
# VERSION: 2.1.0
# LIFECYCLE: Proposed
# DESCRIPTION: Regression tests ensuring v1.1.5 functionality preserved
# ============================================================================

"""
Regression tests for v1.1.5 compatibility.

Ensures all v1.1.5 functionality works identically in v2.1.
Critical for zero-regression requirement.
"""

import pytest
from pathlib import Path
import re
import sys
import os

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../../src')))

from core.parser import BundleParser
from core.writer import BundleWriter, BundleCreator
from core.profiles.plain_marker import PlainMarkerProfile
from core.config import ConfigManager


@pytest.mark.regression
class TestV115BundleFormat:
    """Regression tests for v1.1.5 bundle format parsing."""
    
    def test_parse_v115_bundle_format(self):
        """Test parsing v1.1.5 plain marker format."""
        # This is the exact format generated by v1.1.5
        v115_bundle = """# ===================================================================
# FILE: src/main.py
# ===================================================================
def main():
    print("Hello from v1.1.5")

if __name__ == "__main__":
    main()
"""
        
        parser = BundleParser()
        manifest = parser.parse(v115_bundle, profile_name='plain_marker')
        
        assert manifest.get_file_count() == 1
        assert manifest.entries[0].path == 'src/main.py'
        assert 'Hello from v1.1.5' in manifest.entries[0].content
    
    def test_parse_v115_multiple_files(self):
        """Test parsing v1.1.5 bundle with multiple files."""
        v115_bundle = """# ===================================================================
# FILE: file1.py
# ===================================================================
content1

# ===================================================================
# FILE: file2.py
# ===================================================================
content2
"""
        
        parser = BundleParser()
        manifest = parser.parse(v115_bundle, profile_name='plain_marker')
        
        assert manifest.get_file_count() == 2
    
    def test_parse_v115_without_meta_lines(self):
        """Test v1.1.5 format without META lines (older format)."""
        # v1.1.5 didn't always include META lines
        old_format = """# ===================================================================
# FILE: test.py
# ===================================================================
print("old format")
"""
        
        parser = BundleParser()
        manifest = parser.parse(old_format, profile_name='plain_marker')
        
        assert manifest.get_file_count() == 1
        # Should use defaults when META missing
        assert manifest.entries[0].encoding == 'utf-8'
        assert manifest.entries[0].eol_style == 'LF'


@pytest.mark.regression
class TestV115ParseBehavior:
    """Regression tests for v1.1.5 parser behavior."""
    
    def test_header_detection_case_insensitive(self):
        """Test v1.1.5 case-insensitive FILE: marker."""
        # v1.1.5 used case-insensitive regex
        variants = [
            "# FILE: test.py",
            "# file: test.py",
            "# File: test.py",
            "#FILE: test.py",  # With/without space
        ]
        
        profile = PlainMarkerProfile()
        
        for variant in variants:
            bundle = f"{variant}\ncontent"
            manifest = profile.parse_stream(bundle)
            assert manifest.get_file_count() == 1
    
    def test_whitespace_handling(self):
        """Test v1.1.5 whitespace handling."""
        # v1.1.5 was flexible with whitespace
        bundle = """#    FILE:    src/test.py    
content with trailing space   
"""
        
        parser = BundleParser()
        manifest = parser.parse(bundle, profile_name='plain_marker')
        
        # Path should be trimmed
        assert manifest.entries[0].path == 'src/test.py'
    
    def test_empty_lines_preserved(self):
        """Test v1.1.5 preserved empty lines in content."""
        bundle = """# FILE: test.py
line1

line2


line3
"""
        
        parser = BundleParser()
        manifest = parser.parse(bundle, profile_name='plain_marker')
        
        content = manifest.entries[0].content
        # Empty lines should be preserved
        assert '\n\n' in content


@pytest.mark.regression
class TestV115WriteBehavior:
    """Regression tests for v1.1.5 write/extract behavior."""
    
    def test_header_generation_format(self, temp_dir):
        """Test v1.1.5 header format is preserved."""
        from core.models import BundleEntry, BundleManifest
        
        entry = BundleEntry(
            path='test.py',
            content='content',
            is_binary=False,
            encoding='utf-8',
            eol_style='LF'
        )
        
        manifest = BundleManifest(entries=[entry], profile='plain_marker')
        
        writer = BundleWriter(base_path=temp_dir, add_headers=True)
        output_file = temp_dir / 'test.py'
        writer.write_entry(entry, output_file)
        
        content = output_file.read_text()
        
        # v1.1.5 format: # FILE: path with === borders
        assert '# FILE: test.py' in content
        assert '# ===' in content
    
    def test_directory_creation(self, temp_dir):
        """Test v1.1.5 created parent directories."""
        from core.models import BundleEntry
        
        entry = BundleEntry(
            path='deep/nested/dir/file.py',
            content='content',
            is_binary=False,
            encoding='utf-8',
            eol_style='LF'
        )
        
        writer = BundleWriter(base_path=temp_dir)
        output_file = temp_dir / 'deep' / 'nested' / 'dir' / 'file.py'
        writer.write_entry(entry, output_file)
        
        # Directories should be created
        assert output_file.exists()
        assert output_file.parent.exists()


@pytest.mark.regression
class TestV115ConfigBehavior:
    """Regression tests for v1.1.5 config behavior."""
    
    def test_config_keys_accessible(self, temp_dir, v115_config):
        """Test v1.1.5 config keys remain accessible."""
        config_file = temp_dir / 'bundle_config.json'
        import json
        config_file.write_text(json.dumps(v115_config, indent=2))
        
        config = ConfigManager(str(config_file))
        
        # All v1.1.5 keys should be accessible (through new paths)
        assert config.get('global_settings.input_dir') == v115_config['input_dir']
        assert config.get('global_settings.output_dir') == v115_config['output_dir']
        assert config.get('global_settings.log_dir') == v115_config['log_dir']
        assert config.get('global_settings.ui_layout.buttons_position') == v115_config['buttons_position']
        assert config.get('app_defaults.add_headers') == v115_config['add_headers']
    
    def test_config_defaults_preserved(self, temp_dir):
        """Test v1.1.5 default values are preserved."""
        config_file = temp_dir / 'bundle_config.json'
        
        # Fresh config
        config = ConfigManager(str(config_file))
        
        # v1.1.5 defaults that should still work
        assert config.get('global_settings.log_dir') == 'logs'
        assert config.get('global_settings.ui_layout.buttons_position') == 'bottom'
        assert config.get('app_defaults.add_headers') is True


@pytest.mark.regression
class TestV115PathResolution:
    """Regression tests for v1.1.5 path resolution."""
    
    def test_relative_base_path(self, temp_dir):
        """Test v1.1.5 relative_base_path behavior."""
        from core.models import BundleEntry
        
        # v1.1.5 had relative_base_path setting
        writer = BundleWriter(base_path=temp_dir)
        
        entry = BundleEntry(
            path='src/file.py',
            content='content',
            is_binary=False,
            encoding='utf-8',
            eol_style='LF'
        )
        
        # Should resolve relative to base_path
        output_file = temp_dir / 'src' / 'file.py'
        writer.write_entry(entry, output_file)
        
        assert output_file.exists()
    
    def test_path_normalization(self, temp_dir):
        """Test v1.1.5 normalized paths."""
        from core.models import BundleEntry
        
        # v1.1.5 normalized backslashes to forward slashes
        entry = BundleEntry(
            path='src\\windows\\path.py',
            content='content',
            is_binary=False,
            encoding='utf-8',
            eol_style='LF'
        )
        
        # Path should be normalized in BundleEntry
        assert entry.path == 'src/windows/path.py'


@pytest.mark.regression
class TestV115FileOperations:
    """Regression tests for v1.1.5 file operations."""
    
    def test_save_single_file(self, temp_dir):
        """Test v1.1.5 save single file operation."""
        from core.models import BundleEntry
        
        entry = BundleEntry(
            path='test.py',
            content='print("test")\n',
            is_binary=False,
            encoding='utf-8',
            eol_style='LF'
        )
        
        writer = BundleWriter(base_path=temp_dir, add_headers=False)
        output_file = temp_dir / 'test.py'
        writer.write_entry(entry, output_file)
        
        # File should exist with exact content
        assert output_file.read_text() == 'print("test")\n'
    
    def test_save_all_files(self, temp_dir, sample_manifest):
        """Test v1.1.5 save all files operation."""
        writer = BundleWriter(base_path=temp_dir)
        stats = writer.extract_manifest(sample_manifest, temp_dir)
        
        # All files should be written
        assert stats['processed'] == sample_manifest.get_file_count()
        assert stats['errors'] == 0


@pytest.mark.regression
class TestV115UIBehavior:
    """Regression tests for v1.1.5 UI-related behavior."""
    
    def test_buttons_position_values(self):
        """Test v1.1.5 buttons_position values still valid."""
        from core.config import ConfigManager
        
        valid_positions = ['top', 'bottom']
        
        # These were the only valid values in v1.1.5
        for pos in valid_positions:
            config = ConfigManager.DEFAULT_CONFIG.copy()
            # Should not raise
            assert pos in valid_positions
    
    def test_info_panel_position_values(self):
        """Test v1.1.5 info_panel_position values."""
        # v1.1.5 supported top/middle/bottom
        valid_positions = ['top', 'middle', 'bottom']
        
        for pos in valid_positions:
            # Should be recognized
            assert pos in valid_positions


@pytest.mark.regression
class TestV115EdgeCases:
    """Regression tests for v1.1.5 edge cases and quirks."""
    
    def test_trailing_newline_handling(self):
        """Test v1.1.5 trailing newline handling."""
        # v1.1.5 parser stripped trailing newline during parsing
        bundle = """# FILE: test.py
content
"""
        
        parser = BundleParser()
        manifest = parser.parse(bundle, profile_name='plain_marker')
        
        # Content should not have trailing newline from FILE marker line
        content = manifest.entries[0].content
        assert not content.startswith('\n')
    
    def test_empty_bundle_handling(self):
        """Test v1.1.5 empty bundle handling."""
        empty_bundle = "# Just comments\n# No files\n"
        
        parser = BundleParser()
        
        # Should raise error (no files found)
        with pytest.raises(Exception):  # ProfileParseError
            parser.parse(empty_bundle, profile_name='plain_marker')


@pytest.mark.regression
class TestV115RoundTrip:
    """Regression tests for v1.1.5 round-trip compatibility."""
    
    def test_v115_bundle_roundtrip(self, temp_dir, sample_plain_marker_bundle):
        """Test v1.1.5 bundle can be parsed and re-created."""
        # Parse v1.1.5 bundle
        parser = BundleParser()
        manifest1 = parser.parse(sample_plain_marker_bundle, profile_name='plain_marker')
        
        # Re-create bundle
        profile = PlainMarkerProfile()
        bundle_text = profile.format_manifest(manifest1)
        
        # Parse again
        manifest2 = parser.parse(bundle_text, profile_name='plain_marker')
        
        # Should have same number of files
        assert manifest2.get_file_count() == manifest1.get_file_count()
    
    def test_v115_extract_and_rebundle(self, temp_dir):
        """Test v1.1.5 workflow: bundle → extract → rebundle."""
        # Create original file
        src_dir = temp_dir / 'source'
        src_dir.mkdir()
        (src_dir / 'test.py').write_text('original content')
        
        # Bundle (v1.1.5 style)
        creator = BundleCreator()
        files = creator.discover_files(src_dir)
        manifest1 = creator.create_manifest(files, src_dir, 'plain_marker')
        
        profile = PlainMarkerProfile()
        bundle_text = profile.format_manifest(manifest1)
        
        # Extract
        extract_dir = temp_dir / 'extracted'
        extract_dir.mkdir()
        
        parser = BundleParser()
        manifest2 = parser.parse(bundle_text)
        
        writer = BundleWriter(base_path=extract_dir, add_headers=False)
        writer.extract_manifest(manifest2, extract_dir)
        
        # Rebundle
        files2 = creator.discover_files(extract_dir)
        manifest3 = creator.create_manifest(files2, extract_dir, 'plain_marker')
        
        # Content should match
        assert manifest3.entries[0].content == manifest1.entries[0].content


@pytest.mark.regression
@pytest.mark.slow
class TestV115Performance:
    """Regression tests ensuring v2.1 is not slower than v1.1.5."""
    
    def test_parsing_performance(self, sample_plain_marker_bundle):
        """Test parsing is fast (no performance regression)."""
        import time
        
        parser = BundleParser()
        
        start = time.time()
        manifest = parser.parse(sample_plain_marker_bundle, profile_name='plain_marker')
        elapsed = time.time() - start
        
        # Should be fast
        assert elapsed < 0.1  # 100ms for reasonable bundle
    
    def test_writing_performance(self, temp_dir, sample_manifest):
        """Test writing is fast."""
        import time
        
        writer = BundleWriter(base_path=temp_dir)
        
        start = time.time()
        stats = writer.extract_manifest(sample_manifest, temp_dir)
        elapsed = time.time() - start
        
        # Should be fast
        assert elapsed < 1.0  # 1 second for small manifest


# ============================================================================
# LIFECYCLE STATUS: Proposed
# COVERAGE: Complete v1.1.5 compatibility validation
# CRITICAL: Ensures zero-regression requirement is met
# NEXT STEPS: Run against actual v1.1.5 tool output for verification
# ============================================================================
