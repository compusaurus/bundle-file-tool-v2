[
  {
    "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
    "language": "python",
    "imports": [
      {
        "name": "__future__.annotations",
        "alias": null,
        "line": 16,
        "scope": "module"
      },
      {
        "name": "base64",
        "alias": null,
        "line": 18,
        "scope": "module"
      },
      {
        "name": "os",
        "alias": null,
        "line": 19,
        "scope": "module"
      },
      {
        "name": "re",
        "alias": null,
        "line": 20,
        "scope": "module"
      },
      {
        "name": "sys",
        "alias": null,
        "line": 21,
        "scope": "module"
      },
      {
        "name": "typing.Dict",
        "alias": null,
        "line": 22,
        "scope": "module"
      },
      {
        "name": "typing.List",
        "alias": null,
        "line": 22,
        "scope": "module"
      },
      {
        "name": "typing.Optional",
        "alias": null,
        "line": 22,
        "scope": "module"
      },
      {
        "name": "core.profiles.base.ProfileBase",
        "alias": null,
        "line": 27,
        "scope": "module"
      },
      {
        "name": "core.models.BundleManifest",
        "alias": null,
        "line": 28,
        "scope": "module"
      },
      {
        "name": "core.models.BundleEntry",
        "alias": null,
        "line": 28,
        "scope": "module"
      },
      {
        "name": "core.exceptions.ProfileParseError",
        "alias": null,
        "line": 29,
        "scope": "module"
      },
      {
        "name": "core.exceptions.ProfileFormatError",
        "alias": null,
        "line": 29,
        "scope": "module"
      },
      {
        "name": "logging",
        "alias": null,
        "line": 155,
        "scope": "method:PlainMarkerProfile.format_manifest"
      }
    ],
    "classes": [
      {
        "name": "PlainMarkerProfile",
        "line": 32,
        "doc": "Plain Marker format profile (v1.x compatibility)."
      }
    ],
    "functions": [
      {
        "name": "profile_name",
        "line": 44,
        "kind": "def",
        "scope": "class:PlainMarkerProfile",
        "doc": null,
        "complexity": 1,
        "statement_count": 2
      },
      {
        "name": "get_display_name",
        "line": 47,
        "kind": "def",
        "scope": "class:PlainMarkerProfile",
        "doc": null,
        "complexity": 1,
        "statement_count": 2
      },
      {
        "name": "get_capabilities",
        "line": 50,
        "kind": "def",
        "scope": "class:PlainMarkerProfile",
        "doc": null,
        "complexity": 1,
        "statement_count": 2
      },
      {
        "name": "detect_format",
        "line": 59,
        "kind": "def",
        "scope": "class:PlainMarkerProfile",
        "doc": "Detect if text appears to use '# FILE:' markers.",
        "complexity": 3,
        "statement_count": 6
      },
      {
        "name": "parse_stream",
        "line": 68,
        "kind": "def",
        "scope": "class:PlainMarkerProfile",
        "doc": "Parse plain-marker bundle text into a BundleManifest.\n\nRules:\n  - '# FILE: <path>' begins a new file block.\n  - '# META: key=value; ...' is optional; later keys override earlier.\n  - Separator lines (====) are ignored.\n  - Empty or dot-only paths after '# FILE:' are ignored.\n  - Duplicate paths are consolidated with last-one-wins.",
        "complexity": 15,
        "statement_count": 40
      },
      {
        "name": "format_manifest",
        "line": 147,
        "kind": "def",
        "scope": "class:PlainMarkerProfile",
        "doc": "Convert a BundleManifest to plain-marker text.\nAlways writes 'bundle_format_diagnostic.log' with detailed entry info.",
        "complexity": 16,
        "statement_count": 50
      },
      {
        "name": "_parse_meta",
        "line": 223,
        "kind": "def",
        "scope": "class:PlainMarkerProfile",
        "doc": null,
        "complexity": 2,
        "statement_count": 5
      },
      {
        "name": "_trim_header_spacing",
        "line": 229,
        "kind": "def",
        "scope": "class:PlainMarkerProfile",
        "doc": "Trim a redundant separator newline while honoring an explicit trailing flag.\nMETA example: trailing=false|true",
        "complexity": 6,
        "statement_count": 8
      },
      {
        "name": "_finalize",
        "line": 241,
        "kind": "def",
        "scope": "class:PlainMarkerProfile",
        "doc": null,
        "complexity": 7,
        "statement_count": 7
      },
      {
        "name": "_validate_before_format",
        "line": 257,
        "kind": "def",
        "scope": "class:PlainMarkerProfile",
        "doc": "Ensure entries are well-formed before formatting.",
        "complexity": 8,
        "statement_count": 9
      }
    ],
    "variables": [
      {
        "name": "HEADER_PATTERN",
        "line": 36,
        "scope": "class:PlainMarkerProfile"
      },
      {
        "name": "FILE_PATTERN",
        "line": 37,
        "scope": "class:PlainMarkerProfile"
      },
      {
        "name": "META_PATTERN",
        "line": 38,
        "scope": "class:PlainMarkerProfile"
      },
      {
        "name": "META_FIELD_PATTERN",
        "line": 39,
        "scope": "class:PlainMarkerProfile"
      },
      {
        "name": "m_file",
        "line": 85,
        "scope": "method:PlainMarkerProfile.parse_stream"
      },
      {
        "name": "raw_path",
        "line": 95,
        "scope": "method:PlainMarkerProfile.parse_stream"
      },
      {
        "name": "current_block",
        "line": 98,
        "scope": "method:PlainMarkerProfile.parse_stream"
      },
      {
        "name": "current_meta",
        "line": 99,
        "scope": "method:PlainMarkerProfile.parse_stream"
      },
      {
        "name": "current_block",
        "line": 102,
        "scope": "method:PlainMarkerProfile.parse_stream"
      },
      {
        "name": "current_meta",
        "line": 103,
        "scope": "method:PlainMarkerProfile.parse_stream"
      },
      {
        "name": "m_meta",
        "line": 107,
        "scope": "method:PlainMarkerProfile.parse_stream"
      },
      {
        "name": "seen",
        "line": 131,
        "scope": "method:PlainMarkerProfile.parse_stream"
      },
      {
        "name": "entries",
        "line": 137,
        "scope": "method:PlainMarkerProfile.parse_stream"
      },
      {
        "name": "logger",
        "line": 157,
        "scope": "method:PlainMarkerProfile.format_manifest"
      },
      {
        "name": "fh",
        "line": 160,
        "scope": "method:PlainMarkerProfile.format_manifest"
      },
      {
        "name": "fmt",
        "line": 162,
        "scope": "method:PlainMarkerProfile.format_manifest"
      },
      {
        "name": "border",
        "line": 172,
        "scope": "method:PlainMarkerProfile.format_manifest"
      },
      {
        "name": "tail",
        "line": 184,
        "scope": "method:PlainMarkerProfile.format_manifest"
      },
      {
        "name": "mode",
        "line": 187,
        "scope": "method:PlainMarkerProfile.format_manifest"
      },
      {
        "name": "encoding",
        "line": 188,
        "scope": "method:PlainMarkerProfile.format_manifest"
      },
      {
        "name": "eol",
        "line": 189,
        "scope": "method:PlainMarkerProfile.format_manifest"
      },
      {
        "name": "header",
        "line": 191,
        "scope": "method:PlainMarkerProfile.format_manifest"
      },
      {
        "name": "payload",
        "line": 200,
        "scope": "method:PlainMarkerProfile.format_manifest"
      },
      {
        "name": "payload",
        "line": 202,
        "scope": "method:PlainMarkerProfile.format_manifest"
      },
      {
        "name": "block",
        "line": 207,
        "scope": "method:PlainMarkerProfile.format_manifest"
      },
      {
        "name": "text",
        "line": 209,
        "scope": "method:PlainMarkerProfile.format_manifest"
      },
      {
        "name": "block",
        "line": 210,
        "scope": "method:PlainMarkerProfile.format_manifest"
      },
      {
        "name": "trailing",
        "line": 234,
        "scope": "method:PlainMarkerProfile._trim_header_spacing"
      },
      {
        "name": "path",
        "line": 242,
        "scope": "method:PlainMarkerProfile._finalize"
      },
      {
        "name": "mode",
        "line": 243,
        "scope": "method:PlainMarkerProfile._finalize"
      },
      {
        "name": "encoding",
        "line": 244,
        "scope": "method:PlainMarkerProfile._finalize"
      },
      {
        "name": "is_binary",
        "line": 245,
        "scope": "method:PlainMarkerProfile._finalize"
      },
      {
        "name": "eol",
        "line": 246,
        "scope": "method:PlainMarkerProfile._finalize"
      }
    ],
    "commands": [
      {
        "scope": "module",
        "kind": "ImportFrom",
        "text": "from __future__ import annotations",
        "line": 16,
        "col": 0,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "module",
        "kind": "Import",
        "text": "import base64",
        "line": 18,
        "col": 0,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "module",
        "kind": "Import",
        "text": "import os",
        "line": 19,
        "col": 0,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "module",
        "kind": "Import",
        "text": "import re",
        "line": 20,
        "col": 0,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "module",
        "kind": "Import",
        "text": "import sys",
        "line": 21,
        "col": 0,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "module",
        "kind": "ImportFrom",
        "text": "from typing import Dict, List, Optional",
        "line": 22,
        "col": 0,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "module",
        "kind": "Expr",
        "text": "sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../..')))",
        "line": 25,
        "col": 0,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "module",
        "kind": "ImportFrom",
        "text": "from core.profiles.base import ProfileBase",
        "line": 27,
        "col": 0,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "module",
        "kind": "ImportFrom",
        "text": "from core.models import BundleManifest, BundleEntry",
        "line": 28,
        "col": 0,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "module",
        "kind": "ImportFrom",
        "text": "from core.exceptions import ProfileParseError, ProfileFormatError",
        "line": 29,
        "col": 0,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "class:PlainMarkerProfile",
        "kind": "ClassDef",
        "text": "class PlainMarkerProfile(ProfileBase): \"\"\"Plain Marker format profile (v1.x compatibility).\"\"\" HEADER_PATTERN = re.compile('^\\\\s*#\\\\s*={50,}\\\\s*$') FILE_PATTERN = re.compile('^\\\\s*#\\\\s*FILE\\\\s*:\\\\s*(.+?)\\\\s*$', re.IGNORECASE) META_PATTERN = re.compile('^\\\\s*#\\\\s*META\\\\s*:\\\\s*(.+?)\\\\s*$', re.IGNORECASE) META_FIELD_PATTERN = re.compile('(\\\\w+)\\\\s*=\\\\s*([^;]+)') @property def profile_name(self) -> str: return 'plain_marker' def get_display_name(self) -> str: return 'Plain Marker (Legacy)' def get_capabilities(self) -> Dict[str, bool]: return {'supports_binary': True, 'supports_checksums': False, 'supports_metadata': True} def detect_format(self, text: str) -> bool: \"\"\"Detect if text appears to use '# FILE:' markers.\"\"\" for line in text.splitlines()[:20]: if self.FILE_PATTERN.match(line): return True return False def parse_stream(self, text: str) -> BundleManifest: \"\"\" Parse plain-marker bundle text into a BundleManifest. Rules: - '# FILE: <path>' begins a new file block. - '# META: key=value; ...' is optional; later keys override earlier. - Separator lines (====) are ignored. - Empty or dot-only paths after '# FILE:' are ignored. - Duplicate paths are consolidated with last-one-wins. \"\"\" entries: List[BundleEntry] = [] current_block: Optional[Dict[str, str]] = None current_meta: Dict[str, str] = {} for line_no, line in enumerate(text.splitlines(keepends=True), start=1): m_file = self.FILE_PATTERN.match(line) if m_file: if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) raw_path = (m_file.group(1) or '').strip() if not raw_path or raw_path in {'.', './', '.\\\\', '/'}: current_block = None current_meta = {} continue current_block = {'path': raw_path, 'content': '', 'line_start': line_no} current_meta = {} continue m_meta = self.META_PATTERN.match(line) if m_meta and current_block is not None: current_meta.update(self._parse_meta(m_meta.group(1))) continue if self.HEADER_PATTERN.match(line): continue if current_block is not None: current_block['content'] += line if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) if not entries: raise ProfileParseError(self.profile_name, 'No files found in bundle', 0) seen = set() consolidated: List[BundleEntry] = [] for e in reversed(entries): if e.path not in seen: seen.add(e.path) consolidated.append(e) entries = list(reversed(consolidated)) return BundleManifest(entries=entries, profile=self.profile_name, metadata={'format_version': '1.x', 'parser': 'PlainMarkerProfile'}) def format_manifest(self, manifest: BundleManifest) -> str: \"\"\" Convert a BundleManifest to plain-marker text. Always writes 'bundle_format_diagnostic.log' with detailed entry info. \"\"\" self._validate_before_format(manifest) import logging logger = logging.getLogger('bundle.format_diagnostic') logger.setLevel(logging.DEBUG) if not logger.handlers: fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8') fh.setLevel(logging.DEBUG) fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s') fh.setFormatter(fmt) logger.addHandler(fh) logger.propagate = False logger.info('=' * 80) logger.info('STARTING format_manifest()') logger.info(f'Manifest contains {len(manifest.entries)} entries') logger.info('=' * 80) border = '# ' + '=' * 67 out: List[str] = [] for idx, entry in enumerate(manifest.entries): logger.info(f'\\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---') logger.info(f' Path: {entry.path}') logger.info(f' Binary: {entry.is_binary}') logger.info(f' Encoding: {entry.encoding}') logger.info(f' EOL: {entry.eol_style}') logger.info(f' Content length: {len(entry.content)} chars') logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}') logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}') tail = entry.content[-50:] if entry.content else '' logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}') mode = 'binary' if entry.is_binary else 'text' encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8') eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF') header = f'{border}\\n# FILE: {entry.path}\\n# META: encoding={encoding}; eol={eol}; mode={mode}\\n{border}\\n' if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\\n'): block += '\\n' if idx < len(manifest.entries) - 1: block += '' out.append(block) logger.info('COMPLETED format_manifest()') return ''.join(out) def _parse_meta(self, meta_str: str) -> Dict[str, str]: meta: Dict[str, str] = {} for k, v in self.META_FIELD_PATTERN.findall(meta_str): meta[k.strip().lower()] = v.strip() return meta def _trim_header_spacing(self, content: str, meta: Dict[str, str]) -> str: \"\"\" Trim a redundant separator newline while honoring an explicit trailing flag. META example: trailing=false|true \"\"\" trailing = (meta.get('trailing') or '').strip().lower() if content.endswith('\\n\\n'): return content[:-2] if trailing == 'false' else content[:-1] if trailing == 'false' and content.endswith('\\n'): return content[:-1] return content def _finalize(self, raw: Dict[str, str], meta: Dict[str, str]) -> BundleEntry: path = raw['path'].replace('\\\\', '/') mode = (meta.get('mode') or '').lower() encoding = (meta.get('encoding') or ('base64' if mode == 'binary' else 'utf-8')).lower() is_binary = mode == 'binary' or encoding == 'base64' eol = meta.get('eol') or ('n/a' if is_binary else 'LF') return BundleEntry(path=path, content=raw.get('content', ''), is_binary=is_binary, encoding=encoding, eol_style=eol, checksum=None) def _validate_before_format(self, manifest: BundleManifest) -> None: \"\"\"Ensure entries are well-formed before formatting.\"\"\" for e in manifest.entries: if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes') if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8' if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF'",
        "line": 32,
        "col": 0,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "class:PlainMarkerProfile",
        "kind": "Expr",
        "text": "'Plain Marker format profile (v1.x compatibility).'",
        "line": 33,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "class:PlainMarkerProfile",
        "kind": "Assign",
        "text": "HEADER_PATTERN = re.compile('^\\\\s*#\\\\s*={50,}\\\\s*$')",
        "line": 36,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "class:PlainMarkerProfile",
        "kind": "Assign",
        "text": "FILE_PATTERN = re.compile('^\\\\s*#\\\\s*FILE\\\\s*:\\\\s*(.+?)\\\\s*$', re.IGNORECASE)",
        "line": 37,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "class:PlainMarkerProfile",
        "kind": "Assign",
        "text": "META_PATTERN = re.compile('^\\\\s*#\\\\s*META\\\\s*:\\\\s*(.+?)\\\\s*$', re.IGNORECASE)",
        "line": 38,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "class:PlainMarkerProfile",
        "kind": "Assign",
        "text": "META_FIELD_PATTERN = re.compile('(\\\\w+)\\\\s*=\\\\s*([^;]+)')",
        "line": 39,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.profile_name",
        "kind": "FunctionDef",
        "text": "@property def profile_name(self) -> str: return 'plain_marker'",
        "line": 44,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.profile_name",
        "kind": "Return",
        "text": "return 'plain_marker'",
        "line": 45,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.get_display_name",
        "kind": "FunctionDef",
        "text": "def get_display_name(self) -> str: return 'Plain Marker (Legacy)'",
        "line": 47,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.get_display_name",
        "kind": "Return",
        "text": "return 'Plain Marker (Legacy)'",
        "line": 48,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.get_capabilities",
        "kind": "FunctionDef",
        "text": "def get_capabilities(self) -> Dict[str, bool]: return {'supports_binary': True, 'supports_checksums': False, 'supports_metadata': True}",
        "line": 50,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.get_capabilities",
        "kind": "Return",
        "text": "return {'supports_binary': True, 'supports_checksums': False, 'supports_metadata': True}",
        "line": 51,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.detect_format",
        "kind": "FunctionDef",
        "text": "def detect_format(self, text: str) -> bool: \"\"\"Detect if text appears to use '# FILE:' markers.\"\"\" for line in text.splitlines()[:20]: if self.FILE_PATTERN.match(line): return True return False",
        "line": 59,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.detect_format",
        "kind": "Expr",
        "text": "\"Detect if text appears to use '# FILE:' markers.\"",
        "line": 60,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.detect_format",
        "kind": "For",
        "text": "for line in text.splitlines()[:20]: if self.FILE_PATTERN.match(line): return True",
        "line": 61,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.detect_format",
        "kind": "If",
        "text": "if self.FILE_PATTERN.match(line): return True",
        "line": 62,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.detect_format",
        "kind": "Return",
        "text": "return True",
        "line": 63,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.detect_format",
        "kind": "Return",
        "text": "return False",
        "line": 64,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "FunctionDef",
        "text": "def parse_stream(self, text: str) -> BundleManifest: \"\"\" Parse plain-marker bundle text into a BundleManifest. Rules: - '# FILE: <path>' begins a new file block. - '# META: key=value; ...' is optional; later keys override earlier. - Separator lines (====) are ignored. - Empty or dot-only paths after '# FILE:' are ignored. - Duplicate paths are consolidated with last-one-wins. \"\"\" entries: List[BundleEntry] = [] current_block: Optional[Dict[str, str]] = None current_meta: Dict[str, str] = {} for line_no, line in enumerate(text.splitlines(keepends=True), start=1): m_file = self.FILE_PATTERN.match(line) if m_file: if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) raw_path = (m_file.group(1) or '').strip() if not raw_path or raw_path in {'.', './', '.\\\\', '/'}: current_block = None current_meta = {} continue current_block = {'path': raw_path, 'content': '', 'line_start': line_no} current_meta = {} continue m_meta = self.META_PATTERN.match(line) if m_meta and current_block is not None: current_meta.update(self._parse_meta(m_meta.group(1))) continue if self.HEADER_PATTERN.match(line): continue if current_block is not None: current_block['content'] += line if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) if not entries: raise ProfileParseError(self.profile_name, 'No files found in bundle', 0) seen = set() consolidated: List[BundleEntry] = [] for e in reversed(entries): if e.path not in seen: seen.add(e.path) consolidated.append(e) entries = list(reversed(consolidated)) return BundleManifest(entries=entries, profile=self.profile_name, metadata={'format_version': '1.x', 'parser': 'PlainMarkerProfile'})",
        "line": 68,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Expr",
        "text": "\"\\n Parse plain-marker bundle text into a BundleManifest.\\n\\n Rules:\\n - '# FILE: <path>' begins a new file block.\\n - '# META: key=value; ...' is optional; later keys override earlier.\\n - Separator lines (====) are ignored.\\n - Empty or dot-only paths after '# FILE:' are ignored.\\n - Duplicate paths are consolidated with last-one-wins.\\n \"",
        "line": 69,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "AnnAssign",
        "text": "entries: List[BundleEntry] = []",
        "line": 79,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "AnnAssign",
        "text": "current_block: Optional[Dict[str, str]] = None",
        "line": 80,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "AnnAssign",
        "text": "current_meta: Dict[str, str] = {}",
        "line": 81,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "For",
        "text": "for line_no, line in enumerate(text.splitlines(keepends=True), start=1): m_file = self.FILE_PATTERN.match(line) if m_file: if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) raw_path = (m_file.group(1) or '').strip() if not raw_path or raw_path in {'.', './', '.\\\\', '/'}: current_block = None current_meta = {} continue current_block = {'path': raw_path, 'content': '', 'line_start': line_no} current_meta = {} continue m_meta = self.META_PATTERN.match(line) if m_meta and current_block is not None: current_meta.update(self._parse_meta(m_meta.group(1))) continue if self.HEADER_PATTERN.match(line): continue if current_block is not None: current_block['content'] += line",
        "line": 83,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Assign",
        "text": "m_file = self.FILE_PATTERN.match(line)",
        "line": 85,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "If",
        "text": "if m_file: if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta)) raw_path = (m_file.group(1) or '').strip() if not raw_path or raw_path in {'.', './', '.\\\\', '/'}: current_block = None current_meta = {} continue current_block = {'path': raw_path, 'content': '', 'line_start': line_no} current_meta = {} continue",
        "line": 86,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "If",
        "text": "if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta))",
        "line": 88,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Assign",
        "text": "current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta)",
        "line": 89,
        "col": 20,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Expr",
        "text": "entries.append(self._finalize(current_block, current_meta))",
        "line": 92,
        "col": 20,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Assign",
        "text": "raw_path = (m_file.group(1) or '').strip()",
        "line": 95,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "If",
        "text": "if not raw_path or raw_path in {'.', './', '.\\\\', '/'}: current_block = None current_meta = {} continue",
        "line": 96,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Assign",
        "text": "current_block = None",
        "line": 98,
        "col": 20,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Assign",
        "text": "current_meta = {}",
        "line": 99,
        "col": 20,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Continue",
        "text": "continue",
        "line": 100,
        "col": 20,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Assign",
        "text": "current_block = {'path': raw_path, 'content': '', 'line_start': line_no}",
        "line": 102,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Assign",
        "text": "current_meta = {}",
        "line": 103,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Continue",
        "text": "continue",
        "line": 104,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Assign",
        "text": "m_meta = self.META_PATTERN.match(line)",
        "line": 107,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "If",
        "text": "if m_meta and current_block is not None: current_meta.update(self._parse_meta(m_meta.group(1))) continue",
        "line": 108,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Expr",
        "text": "current_meta.update(self._parse_meta(m_meta.group(1)))",
        "line": 109,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Continue",
        "text": "continue",
        "line": 110,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "If",
        "text": "if self.HEADER_PATTERN.match(line): continue",
        "line": 113,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Continue",
        "text": "continue",
        "line": 114,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "If",
        "text": "if current_block is not None: current_block['content'] += line",
        "line": 117,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "AugAssign",
        "text": "current_block['content'] += line",
        "line": 118,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "If",
        "text": "if current_block is not None: current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta) entries.append(self._finalize(current_block, current_meta))",
        "line": 121,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Assign",
        "text": "current_block['content'] = self._trim_header_spacing(current_block['content'], current_meta)",
        "line": 122,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Expr",
        "text": "entries.append(self._finalize(current_block, current_meta))",
        "line": 125,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "If",
        "text": "if not entries: raise ProfileParseError(self.profile_name, 'No files found in bundle', 0)",
        "line": 127,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Raise",
        "text": "raise ProfileParseError(self.profile_name, 'No files found in bundle', 0)",
        "line": 128,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Assign",
        "text": "seen = set()",
        "line": 131,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "AnnAssign",
        "text": "consolidated: List[BundleEntry] = []",
        "line": 132,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "For",
        "text": "for e in reversed(entries): if e.path not in seen: seen.add(e.path) consolidated.append(e)",
        "line": 133,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "If",
        "text": "if e.path not in seen: seen.add(e.path) consolidated.append(e)",
        "line": 134,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Expr",
        "text": "seen.add(e.path)",
        "line": 135,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Expr",
        "text": "consolidated.append(e)",
        "line": 136,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Assign",
        "text": "entries = list(reversed(consolidated))",
        "line": 137,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.parse_stream",
        "kind": "Return",
        "text": "return BundleManifest(entries=entries, profile=self.profile_name, metadata={'format_version': '1.x', 'parser': 'PlainMarkerProfile'})",
        "line": 139,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "FunctionDef",
        "text": "def format_manifest(self, manifest: BundleManifest) -> str: \"\"\" Convert a BundleManifest to plain-marker text. Always writes 'bundle_format_diagnostic.log' with detailed entry info. \"\"\" self._validate_before_format(manifest) import logging logger = logging.getLogger('bundle.format_diagnostic') logger.setLevel(logging.DEBUG) if not logger.handlers: fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8') fh.setLevel(logging.DEBUG) fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s') fh.setFormatter(fmt) logger.addHandler(fh) logger.propagate = False logger.info('=' * 80) logger.info('STARTING format_manifest()') logger.info(f'Manifest contains {len(manifest.entries)} entries') logger.info('=' * 80) border = '# ' + '=' * 67 out: List[str] = [] for idx, entry in enumerate(manifest.entries): logger.info(f'\\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---') logger.info(f' Path: {entry.path}') logger.info(f' Binary: {entry.is_binary}') logger.info(f' Encoding: {entry.encoding}') logger.info(f' EOL: {entry.eol_style}') logger.info(f' Content length: {len(entry.content)} chars') logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}') logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}') tail = entry.content[-50:] if entry.content else '' logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}') mode = 'binary' if entry.is_binary else 'text' encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8') eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF') header = f'{border}\\n# FILE: {entry.path}\\n# META: encoding={encoding}; eol={eol}; mode={mode}\\n{border}\\n' if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\\n'): block += '\\n' if idx < len(manifest.entries) - 1: block += '' out.append(block) logger.info('COMPLETED format_manifest()') return ''.join(out)",
        "line": 147,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "\"\\n Convert a BundleManifest to plain-marker text.\\n Always writes 'bundle_format_diagnostic.log' with detailed entry info.\\n \"",
        "line": 148,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "self._validate_before_format(manifest)",
        "line": 152,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Import",
        "text": "import logging",
        "line": 155,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "logger = logging.getLogger('bundle.format_diagnostic')",
        "line": 157,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.setLevel(logging.DEBUG)",
        "line": 158,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "If",
        "text": "if not logger.handlers: fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8') fh.setLevel(logging.DEBUG) fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s') fh.setFormatter(fmt) logger.addHandler(fh)",
        "line": 159,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "fh = logging.FileHandler('bundle_format_diagnostic.log', mode='w', encoding='utf-8')",
        "line": 160,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "fh.setLevel(logging.DEBUG)",
        "line": 161,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "fmt = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')",
        "line": 162,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "fh.setFormatter(fmt)",
        "line": 163,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.addHandler(fh)",
        "line": 164,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "logger.propagate = False",
        "line": 165,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.info('=' * 80)",
        "line": 167,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.info('STARTING format_manifest()')",
        "line": 168,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.info(f'Manifest contains {len(manifest.entries)} entries')",
        "line": 169,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.info('=' * 80)",
        "line": 170,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "border = '# ' + '=' * 67",
        "line": 172,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "AnnAssign",
        "text": "out: List[str] = []",
        "line": 173,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "For",
        "text": "for idx, entry in enumerate(manifest.entries): logger.info(f'\\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---') logger.info(f' Path: {entry.path}') logger.info(f' Binary: {entry.is_binary}') logger.info(f' Encoding: {entry.encoding}') logger.info(f' EOL: {entry.eol_style}') logger.info(f' Content length: {len(entry.content)} chars') logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}') logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}') tail = entry.content[-50:] if entry.content else '' logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}') mode = 'binary' if entry.is_binary else 'text' encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8') eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF') header = f'{border}\\n# FILE: {entry.path}\\n# META: encoding={encoding}; eol={eol}; mode={mode}\\n{border}\\n' if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\\n'): block += '\\n' if idx < len(manifest.entries) - 1: block += '' out.append(block)",
        "line": 175,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.info(f'\\n--- Processing Entry {idx + 1}/{len(manifest.entries)} ---')",
        "line": 176,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.info(f' Path: {entry.path}')",
        "line": 177,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.info(f' Binary: {entry.is_binary}')",
        "line": 178,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.info(f' Encoding: {entry.encoding}')",
        "line": 179,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.info(f' EOL: {entry.eol_style}')",
        "line": 180,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.info(f' Content length: {len(entry.content)} chars')",
        "line": 181,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.info(f' Content ends with newline: {entry.content.endswith(chr(10))}')",
        "line": 182,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.info(f' Content ends with CRLF: {entry.content.endswith(chr(13) + chr(10))}')",
        "line": 183,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "tail = entry.content[-50:] if entry.content else ''",
        "line": 184,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.info(f' Last 50 chars (repr): {(repr(tail) if tail else 'EMPTY')}')",
        "line": 185,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "mode = 'binary' if entry.is_binary else 'text'",
        "line": 187,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "encoding = entry.encoding or ('base64' if entry.is_binary else 'utf-8')",
        "line": 188,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "eol = entry.eol_style or ('n/a' if entry.is_binary else 'LF')",
        "line": 189,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "header = f'{border}\\n# FILE: {entry.path}\\n# META: encoding={encoding}; eol={eol}; mode={mode}\\n{border}\\n'",
        "line": 191,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "If",
        "text": "if entry.is_binary: if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}') block = header + payload + '\\n' else: text = entry.content if isinstance(entry.content, str) else str(entry.content) block = header + text if not block.endswith('\\n'): block += '\\n'",
        "line": 198,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "If",
        "text": "if isinstance(entry.content, str): payload = entry.content.strip() elif isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')",
        "line": 199,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "payload = entry.content.strip()",
        "line": 200,
        "col": 20,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "If",
        "text": "if isinstance(entry.content, (bytes, bytearray)): payload = base64.b64encode(bytes(entry.content)).decode('ascii') else: raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')",
        "line": 201,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "payload = base64.b64encode(bytes(entry.content)).decode('ascii')",
        "line": 202,
        "col": 20,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Raise",
        "text": "raise ProfileFormatError(self.profile_name, f'Unsupported binary content type: {type(entry.content)}')",
        "line": 204,
        "col": 20,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "block = header + payload + '\\n'",
        "line": 207,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "text = entry.content if isinstance(entry.content, str) else str(entry.content)",
        "line": 209,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Assign",
        "text": "block = header + text",
        "line": 210,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "If",
        "text": "if not block.endswith('\\n'): block += '\\n'",
        "line": 211,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "AugAssign",
        "text": "block += '\\n'",
        "line": 212,
        "col": 20,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "If",
        "text": "if idx < len(manifest.entries) - 1: block += ''",
        "line": 214,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "AugAssign",
        "text": "block += ''",
        "line": 215,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "out.append(block)",
        "line": 216,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Expr",
        "text": "logger.info('COMPLETED format_manifest()')",
        "line": 218,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile.format_manifest",
        "kind": "Return",
        "text": "return ''.join(out)",
        "line": 219,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._parse_meta",
        "kind": "FunctionDef",
        "text": "def _parse_meta(self, meta_str: str) -> Dict[str, str]: meta: Dict[str, str] = {} for k, v in self.META_FIELD_PATTERN.findall(meta_str): meta[k.strip().lower()] = v.strip() return meta",
        "line": 223,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._parse_meta",
        "kind": "AnnAssign",
        "text": "meta: Dict[str, str] = {}",
        "line": 224,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._parse_meta",
        "kind": "For",
        "text": "for k, v in self.META_FIELD_PATTERN.findall(meta_str): meta[k.strip().lower()] = v.strip()",
        "line": 225,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._parse_meta",
        "kind": "Assign",
        "text": "meta[k.strip().lower()] = v.strip()",
        "line": 226,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._parse_meta",
        "kind": "Return",
        "text": "return meta",
        "line": 227,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._trim_header_spacing",
        "kind": "FunctionDef",
        "text": "def _trim_header_spacing(self, content: str, meta: Dict[str, str]) -> str: \"\"\" Trim a redundant separator newline while honoring an explicit trailing flag. META example: trailing=false|true \"\"\" trailing = (meta.get('trailing') or '').strip().lower() if content.endswith('\\n\\n'): return content[:-2] if trailing == 'false' else content[:-1] if trailing == 'false' and content.endswith('\\n'): return content[:-1] return content",
        "line": 229,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._trim_header_spacing",
        "kind": "Expr",
        "text": "'\\n Trim a redundant separator newline while honoring an explicit trailing flag.\\n META example: trailing=false|true\\n '",
        "line": 230,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._trim_header_spacing",
        "kind": "Assign",
        "text": "trailing = (meta.get('trailing') or '').strip().lower()",
        "line": 234,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._trim_header_spacing",
        "kind": "If",
        "text": "if content.endswith('\\n\\n'): return content[:-2] if trailing == 'false' else content[:-1]",
        "line": 235,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._trim_header_spacing",
        "kind": "Return",
        "text": "return content[:-2] if trailing == 'false' else content[:-1]",
        "line": 236,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._trim_header_spacing",
        "kind": "If",
        "text": "if trailing == 'false' and content.endswith('\\n'): return content[:-1]",
        "line": 237,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._trim_header_spacing",
        "kind": "Return",
        "text": "return content[:-1]",
        "line": 238,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._trim_header_spacing",
        "kind": "Return",
        "text": "return content",
        "line": 239,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._finalize",
        "kind": "FunctionDef",
        "text": "def _finalize(self, raw: Dict[str, str], meta: Dict[str, str]) -> BundleEntry: path = raw['path'].replace('\\\\', '/') mode = (meta.get('mode') or '').lower() encoding = (meta.get('encoding') or ('base64' if mode == 'binary' else 'utf-8')).lower() is_binary = mode == 'binary' or encoding == 'base64' eol = meta.get('eol') or ('n/a' if is_binary else 'LF') return BundleEntry(path=path, content=raw.get('content', ''), is_binary=is_binary, encoding=encoding, eol_style=eol, checksum=None)",
        "line": 241,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._finalize",
        "kind": "Assign",
        "text": "path = raw['path'].replace('\\\\', '/')",
        "line": 242,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._finalize",
        "kind": "Assign",
        "text": "mode = (meta.get('mode') or '').lower()",
        "line": 243,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._finalize",
        "kind": "Assign",
        "text": "encoding = (meta.get('encoding') or ('base64' if mode == 'binary' else 'utf-8')).lower()",
        "line": 244,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._finalize",
        "kind": "Assign",
        "text": "is_binary = mode == 'binary' or encoding == 'base64'",
        "line": 245,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._finalize",
        "kind": "Assign",
        "text": "eol = meta.get('eol') or ('n/a' if is_binary else 'LF')",
        "line": 246,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._finalize",
        "kind": "Return",
        "text": "return BundleEntry(path=path, content=raw.get('content', ''), is_binary=is_binary, encoding=encoding, eol_style=eol, checksum=None)",
        "line": 248,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._validate_before_format",
        "kind": "FunctionDef",
        "text": "def _validate_before_format(self, manifest: BundleManifest) -> None: \"\"\"Ensure entries are well-formed before formatting.\"\"\" for e in manifest.entries: if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes') if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8' if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF'",
        "line": 257,
        "col": 4,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._validate_before_format",
        "kind": "Expr",
        "text": "'Ensure entries are well-formed before formatting.'",
        "line": 258,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._validate_before_format",
        "kind": "For",
        "text": "for e in manifest.entries: if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes') if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8' if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF'",
        "line": 259,
        "col": 8,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._validate_before_format",
        "kind": "If",
        "text": "if e.is_binary and (not isinstance(e.content, (str, bytes, bytearray))): raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes')",
        "line": 260,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._validate_before_format",
        "kind": "Raise",
        "text": "raise ProfileFormatError(self.profile_name, 'Binary entry content must be str/bytes')",
        "line": 261,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._validate_before_format",
        "kind": "If",
        "text": "if not e.encoding: e.encoding = 'base64' if e.is_binary else 'utf-8'",
        "line": 262,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._validate_before_format",
        "kind": "Assign",
        "text": "e.encoding = 'base64' if e.is_binary else 'utf-8'",
        "line": 263,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._validate_before_format",
        "kind": "If",
        "text": "if not e.eol_style: e.eol_style = 'n/a' if e.is_binary else 'LF'",
        "line": 264,
        "col": 12,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      },
      {
        "scope": "method:PlainMarkerProfile._validate_before_format",
        "kind": "Assign",
        "text": "e.eol_style = 'n/a' if e.is_binary else 'LF'",
        "line": 265,
        "col": 16,
        "file": "C:/Users/mpw/python/bundle_file_project/bundle_file_tool_v2/src/core/profiles/proposed_plain_marker.py",
        "pos_index": 1
      }
    ],
    "metrics": {
      "file": {
        "statement_count": 147,
        "function_count": 10,
        "class_count": 1
      },
      "functions": []
    }
  }
]